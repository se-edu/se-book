
    var pageVueRenderFn = function anonymous(
) {
with(this){return _c('div',{attrs:{"id":"app"}},[_c('header',{attrs:{"sticky":""}},[_c('navbar',{attrs:{"placement":"top","type":"dark"},scopedSlots:_u([{key:"brand",fn:function(){return [_c('a',{staticClass:"navbar-brand",attrs:{"href":"https://se-education.org","title":"SE-EDU"}},[_c('span',[_c('span',{staticClass:"fas fa-chevron-circle-left",attrs:{"aria-hidden":"true"}}),_v(" "),_c('strong',[_c('strong',[_v("SE-EDU")])])])])]},proxy:true},{key:"right",fn:function(){return [_c('li',{staticClass:"nav-link"},[_c('form',{staticClass:"navbar-form"},[_c('searchbar',{attrs:{"data":searchData,"placeholder":"Search","on-hit":searchCallback,"menu-align-right":""}})],1)])]},proxy:true}])},[_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/se-book/index.html"}},[_c('span',[_c('strong',[_v("Home")])])])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/se-book/about/acknowledgements.html"}},[_c('span',[_c('strong',[_v("About")])])])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"https://github.com/se-edu/se-book"}},[_c('span',[_c('span',{staticClass:"fab fa-github",attrs:{"aria-hidden":"true"}})])])])])],1),_v(" "),_c('div',{attrs:{"id":"flex-body"}},[_c('overlay-source',{staticClass:"fixed-header-padding",attrs:{"id":"site-nav","tag-name":"nav","to":"site-nav"}},[_c('div',{staticClass:"nav-component slim-scroll"},[_c('site-nav',[_c('overlay-source',{staticClass:"site-nav-list site-nav-list-root",attrs:{"tag-name":"ul","to":"mb-site-nav"}},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('strong',[_v("About this book")]),_v(" "),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/about/acknowledgements.html"}},[_v("About")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/about/usage.html"}},[_v("How to use this book")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('strong',[_v("Software engineering")]),_v(" "),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/softwareEngineering/index.html"}},[_v("Software engineering")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('strong',[_v("Object-oriented programming")]),_v(" "),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/oop/index.html"}},[_v("Object-oriented programming")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('strong',[_v("Requirements")]),_v(" "),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/requirements/index.html"}},[_v("Requirements")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/gatheringRequirements/index.html"}},[_v("Gathering requirements")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/specifyingRequirements/index.html"}},[_v("Specifying requirements")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('strong',[_v("Design")]),_v(" "),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/design/index.html"}},[_v("Design")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/designFundamentals/index.html"}},[_v("Design fundamentals")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/modeling/index.html"}},[_v("Modeling")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/architecture/index.html"}},[_v("Architecture")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/designPatterns/index.html"}},[_v("Design patterns")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/designApproaches/index.html"}},[_v("Design approaches")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('strong',[_v("Implementation")]),_v(" "),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/ides/index.html"}},[_v("IDEs")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/codeQuality/index.html"}},[_v("Code quality")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/refactoring/index.html"}},[_v("Refactoring")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/documentation/index.html"}},[_v("Documentation")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/errorHandling/index.html"}},[_v("Error handling")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/integration/index.html"}},[_v("Integration")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/reuse/index.html"}},[_v("Reuse")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('strong',[_v("Quality assurance")]),_v(" "),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/qualityAssurance/index.html"}},[_v("Quality assurance")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/testing/index.html"}},[_v("Testing")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/testCaseDesign/index.html"}},[_v("Test case design")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('strong',[_v("Project management")]),_v(" "),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/revisionControl/index.html"}},[_v("Revision control")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/projectPlanning/index.html"}},[_v("Project planning")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/teamwork/index.html"}},[_v("Teamwork")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/processModels/index.html"}},[_v("SDLC process models")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('strong',[_v("Tools")]),_v(" "),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/uml/index.html"}},[_v("UML")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/intellij/index.html"}},[_v("IntelliJ IDEA")])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/gitAndGithub/index.html"}},[_v("Git and GitHub")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('strong',[_v("Principles")]),_v(" "),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/principles/index.html"}},[_v("Principles")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('strong',[_v("Supplementary")]),_v(" "),_c('i',{staticClass:"site-nav-dropdown-btn-icon",attrs:{"onclick":"handleSiteNavClick(this.parentNode, false); event.stopPropagation();"}},[_c('span',{staticClass:"glyphicon glyphicon-menu-down",attrs:{"aria-hidden":"true"}})])]),_c('ul',{staticClass:"site-nav-dropdown-container site-nav-list"},[_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-1",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/cppToJava/index.html"}},[_v("C++ to Java")])])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/combined/exercises.html"}},[_c('strong',[_v("Combined exercises")])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/common/definitions.html"}},[_c('strong',[_v("List of definitions")])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/common/references.html"}},[_c('strong',[_v("List of references")])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/common/outcomes.html"}},[_c('strong',[_v("List of learning outcomes")])])])]),_v(" "),_c('li',[_c('div',{staticClass:"site-nav-default-list-item site-nav-list-item-0",attrs:{"onclick":"handleSiteNavClick(this)"}},[_c('a',{attrs:{"href":"/se-book/common/print.html"}},[_c('strong',[_v("Printable version")])])])])])],1)],1)]),_v(" "),_c('div',{staticClass:"fixed-header-padding",attrs:{"id":"content-wrapper"}},[_m(0),_v(" "),_m(1),_c('div',{staticClass:"website-content"},[_c('div',{attrs:{"id":"main"}},[_m(2),_v(" "),_c('div',[_m(3),_v(" "),_c('div',[_c('p',[_v("Let's take your first few steps in your Git (with GitHub) journey.")]),_v(" "),_m(4),_c('p'),_v(" "),_c('panel',{staticClass:"non-printable",scopedSlots:_u([{key:"header",fn:function(){return [_c('p',[_c('span',{staticClass:"dimmed"},[_c('span',[_c('span',{staticClass:"fas fa-paperclip",attrs:{"aria-hidden":"true"}})]),_v(" Git Overview")])])]},proxy:true}])},[_v(" "),_c('div',{staticClass:"block-embed block-embed-service-youtube",staticStyle:{"position":"relative","padding-bottom":"60.9375%"}},[_c('iframe',{attrs:{"type":"text/html","src":"//www.youtube.com/embed/v40b3ExbM0c","frameborder":"0","webkitallowfullscreen":"","mozallowfullscreen":"","allowfullscreen":""}})])]),_c('p'),_v(" "),_m(5),_v(" "),_m(6),_v(" "),_m(7),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_c('span',{staticClass:"fab fa-windows",attrs:{"aria-hidden":"true"}}),_v(" Windows: Click "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("File")]),_v(" → "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Clone/New…")]),_v(". Click on "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Create")]),_v(" button."),_c('br'),_v(" "),_c('span',{staticClass:"fab fa-apple",attrs:{"aria-hidden":"true"}}),_v(" Mac: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("New...")]),_v(" → "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Create New Repository")]),_v(".")]),_v(" "),_c('p',[_v("Enter the location of the directory (Windows version shown below) and click "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Create")]),_v(".")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/init/images/sourcetree_1.png","height":"220"}}),_v(" "),_c('p'),_v(" "),_c('p',[_v("Go to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("things")]),_v(" folder and observe how a hidden folder "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".git")]),_v(" has been created.")]),_v(" "),_c('p',[_c('span',{staticClass:"fab fa-windows",attrs:{"aria-hidden":"true"}}),_v(" Windows: you might have to "),_c('a',{attrs:{"href":"https://www.howtogeek.com/howto/windows-vista/show-hidden-files-and-folders-in-windows-vista/"}},[_v("configure Windows Explorer to show hidden files")]),_v(".")])])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Open a Git Bash Terminal.")]),_v(" "),_c('p',[_v("If you installed SourceTree, you can click the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Terminal")]),_v(" button to open a GitBash terminal.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/init/images/cli_1.png","height":"100"}}),_v(" "),_c('p'),_v(" "),_c('p',[_v("Navigate to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("things")]),_v(" directory.")]),_v(" "),_c('p',[_v("Use the command "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git init")]),_v(" which should initialize the repo.")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("$ git init\n")]),_c('span',[_v("Initialized empty Git repository in c:/repos/things/.git/\n")])])]),_c('p',[_v("You can use the command "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("ls -a")]),_v(" to view all files, which should show the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".git")]),_v(" directory that was created by the previous command.")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("$ ls -a\n")]),_c('span',[_v(".  ..  .git\n")])])]),_c('p',[_v("You can also use the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git status")]),_v(" command to check the status of the newly-created repo. It should respond with something like the following:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("git status\n")])])]),_c('p',[_c('span',[_c('span',{staticClass:"fas fa-arrow-down",attrs:{"aria-hidden":"true"}})])]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("# On branch master\n")]),_c('span',[_v("#\n")]),_c('span',[_v("# Initial commit\n")]),_c('span',[_v("#\n")]),_c('span',[_v("nothing to commit (create/copy files and use \"git add\" to track)\n")])])])])])],1)],1)]),_v(" "),_c('div',[_m(8),_v(" "),_c('div',[_m(9),_v(" "),_c('box',{attrs:{"type":"definition","seamless":""}},[_c('div',[_c('p',[_c('strong',[_v("Working directory")]),_v(": the root directory revision-controlled by Git (e.g., the directory in which the repo was initialized).")])])]),_v(" "),_c('box',{attrs:{"type":"definition","seamless":""}},[_c('div',[_c('p',[_c('strong',[_v("Commit")]),_v(" (noun): a change (aka a "),_c('em',[_v("revision")]),_v(") saved in the Git revision history."),_c('br'),_v("\n(verb): the act of creating a commit i.e., saving a change in the working directory into the Git revision history.")])])]),_v(" "),_c('p',[_v("Here are the steps you can follow to learn how to work with Git commits:")]),_v(" "),_m(10),_v(" "),_m(11),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("The file is shown as ‘unstaged’.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/commit/images/sourcetree_1.png","height":"220"}}),_v(" "),_c('p')])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("You can use the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git status")]),_v(" command to check the status of the working directory.")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs sh"}},[_c('span',[_v("git status\n")])])]),_c('p',[_c('span',[_c('span',{staticClass:"fas fa-arrow-down",attrs:{"aria-hidden":"true"}})])]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs sh"}},[_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("# On branch master")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("#")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("# Initial commit")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("#")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("# Untracked files:")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("#   (use \"git add <file>...\" to include in what will be committed)")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("#")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("#   a.txt")]),_v("\n")]),_c('span',[_v("nothing added to commit but untracked files present (use "),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("\"git add\"")]),_v(" to track)\n")])])])])])],1),_v(" "),_m(12),_v(" "),_c('box',{attrs:{"type":"definition","seamless":""}},[_c('div',[_c('p',[_c('strong',[_v("Stage")]),_v(" (verb): Instructing Git to prepare a file for committing.")])])]),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Select the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fruits.txt")]),_v(" and click on the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Stage Selected")]),_v(" button.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/commit/images/sourcetree_2.png","height":"100"}}),_v(" "),_c('p'),_v(" "),_c('p',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fruits.txt")]),_v(" should appear in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Staged files")]),_v(" panel now.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/commit/images/sourcetree_3.png","height":"180"}}),_v(" "),_c('p')])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("You can use the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("stage")]),_v(" or the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("add")]),_v(" command (they are synonyms, "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("add")]),_v(" is the more popular choice) to stage files.")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs sh"}},[_c('span',[_v("git add fruits.txt\n")]),_c('span',[_v("git status\n")])])]),_c('p',[_c('span',[_c('span',{staticClass:"fas fa-arrow-down",attrs:{"aria-hidden":"true"}})])]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs sh"}},[_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("# On branch master")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("#")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("# Initial commit")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("#")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("# Changes to be committed:")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("#   (use \"git rm --cached <file>...\" to unstage)")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("#")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("#       new file:   fruits.txt")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("#")]),_v("\n")])])])])])],1),_v(" "),_m(13),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Click the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Commit")]),_v(" button, enter a commit message e.g. "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("add fruits.txt")]),_v(" into the text box, and click "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Commit")]),_v(".")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/commit/images/sourcetree_4.png","height":"300"}}),_v(" "),_c('p')])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Use the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("commit")]),_v(" command to commit. The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("-m")]),_v(" switch is used to specify the commit message.")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs sh"}},[_c('span',[_v("git commit -m "),_c('span',{pre:true,attrs:{"class":"hljs-string"}},[_v("\"Add fruits.txt\"")]),_v("\n")])])]),_c('p',[_v("You can use the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("log")]),_v(" command to see the commit history.")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs sh"}},[_c('span',[_v("git "),_c('span',{pre:true,attrs:{"class":"hljs-built_in"}},[_v("log")]),_v("\n")])])]),_c('p',[_c('span',[_c('span',{staticClass:"fas fa-arrow-down",attrs:{"aria-hidden":"true"}})])]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("commit 8fd30a6910efb28bb258cd01be93e481caeab846\n")]),_c('span',[_v("Author: … < … @... >\n")]),_c('span',[_v("Date:   Wed Jul 5 16:06:28 2017 +0800\n")]),_c('span',[_v("\n")]),_c('span',[_v("  Add fruits.txt\n")])])])])])],1),_v(" "),_m(14),_v(" "),_m(15),_v(" "),_m(16),_v(" "),_m(17),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('p',[_v("To see the revision graph, click on the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("History")]),_v(" item on the menu on the right edge of SourceTree.")])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('p',[_v("The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("gitk")]),_v(" command opens a rudimentary graphical view of the revision graph.")])])],1)],1)]),_v(" "),_c('div',[_m(18),_v(" "),_c('div',[_c('p',[_v("Often, there are files inside the Git working folder that you don't want to revision-control e.g., temporary log files. Follow the steps below to learn how to configure Git to ignore such files.")]),_v(" "),_m(19),_v(" "),_m(20),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("The file should be currently listed under "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Unstaged files")]),_v(". Right-click it and choose "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Ignore…")]),_v(". Choose "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Ignore exact filename(s)")]),_v(" and click "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("OK")]),_v(".")]),_v(" "),_c('p',[_v("Observe that a file named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".gitignore")]),_v(" has been created in the working directory root and has the following line in it.")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("temp.txt\n")])])])])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Create a file named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".gitignore")]),_v(" in the working directory root and add the following line in it.")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("temp.txt\n")])])])])])],1),_v(" "),_c('box',[_c('h5',{attrs:{"id":"the-gitignore-file"}},[_c('span',{staticClass:"anchor",attrs:{"id":"the-gitignore-file"}}),_v("The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".gitignore")]),_v(" file"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#the-gitignore-file","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".gitignore")]),_v(" file tells Git which files to ignore when tracking revision history. That file itself can be either revision controlled or ignored.")]),_v(" "),_c('ul',[_c('li',[_c('p',[_v("To version control it (the more common choice – which allows you to track how the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".gitignore")]),_v(" file changes over time), simply commit it as you would commit any other file.")])]),_v(" "),_c('li',[_c('p',[_v("To ignore it, follow the same steps you followed above when you set Git to ignore the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("temp.txt")]),_v(" file.")])]),_v(" "),_c('li',[_c('p',[_v("It supports file patterns e.g., adding "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("temp/*.tmp")]),_v(" to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".gitignore")]),_v(" file prevents Git from tracking any "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".tmp")]),_v(" files in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("temp")]),_v(" directory.")])])]),_v(" "),_c('p',[_c('span',[_c('span',{staticClass:"fas fa-paperclip",attrs:{"aria-hidden":"true"}})]),_v(" More information about the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".gitignore")]),_v(" file: "),_c('a',{attrs:{"href":"https://git-scm.com/docs/gitignore"}},[_v("git-scm.com/docs/gitignore")])])]),_v(" "),_c('box',{attrs:{"type":"important","seamless":""}},[_c('p',[_c('strong',[_v("Files recommended to be omitted from version control")])]),_v(" "),_c('ul',[_c('li',[_c('strong',[_v("Binary files")]),_v(" "),_c('em',[_v("generated")]),_v(" when building your project "),_c('span',{staticClass:"dimmed"},[_v("e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("*.class")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("*.jar")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("*.exe")])]),_v(" (reasons: 1. no need to version control these files as they can be generated again from the source code 2. Revision control systems are optimized for tracking text-based files, not binary files.")]),_v(" "),_c('li',[_c('strong',[_v("Temporary files")]),_v(" "),_c('span',{staticClass:"dimmed"},[_v("e.g., log files generated while testing the product")])]),_v(" "),_c('li',[_c('strong',[_v("Local files")]),_v(" i.e., files specific to your own computer "),_c('span',{staticClass:"dimmed"},[_v("e.g., local settings of your IDE")])]),_v(" "),_c('li',[_c('strong',[_v("Sensitive content")]),_v(" i.e., files containing sensitive/personal information "),_c('span',{staticClass:"dimmed"},[_v("e.g., credential files, personal identification data")]),_v(" (especially, if there is a possibility of those files getting leaked via the revision control system).")])])])],1)]),_v(" "),_c('div',[_m(21),_v(" "),_c('div',[_m(22),_v(" "),_m(23),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Right-click on the commit (in the graphical revision graph) you want to tag and choose "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Tag…")]),_v(".")]),_v(" "),_c('p',[_v("Specify the tag name e.g. "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v1.0")]),_v(" and click "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Add Tag")]),_v(".")]),_v(" "),_c('p',[_v("The added tag will appear in the revision graph view.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/tag/images/sourcetree_1.png","height":"70"}}),_v(" "),_c('p')])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("To add a tag to the current commit as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v1.0")]),_v(",")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("git tag –a v1.0\n")])])]),_c('p',[_v("To view tags")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("git tag\n")])])]),_c('p',[_v("To learn how to add a tag to a past commit, go to the "),_c('a',{attrs:{"href":"https://git-scm.com/book/en/v2/Git-Basics-Tagging"}},[_v("‘Git Basics – Tagging’ page of the git-scm book")]),_v(" and refer the ‘Tagging Later’ section.")]),_v(" "),_c('box',{attrs:{"type":"warning"}},[_c('p',[_v("Remember to push tags to the repo. A normal push does not include tags.")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("# push a specific tag\n")]),_c('span',[_v("git push origin v1.0b\n")]),_c('span',[_v("\n")]),_c('span',[_v("# push all tags\n")]),_c('span',[_v("git push origin --tags\n")])])])])],1)])],1),_v(" "),_c('p',[_v("After adding a tag to a commit, you can use the tag to refer to that commit, as an alternative to using the hash.")])],1)]),_v(" "),_c('div',[_m(24),_v(" "),_c('div',[_m(25),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("To see which files changed in a commit, click on the commit. To see what changed in a specific file in that commit, click on the file name.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/diff/images/sourcetree_1.png","height":"220"}}),_v(" "),_c('p')])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs sh"}},[_c('span',[_v("git show < part-of-commit-hash >\n")])])]),_c('p',[_v("Example:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("git show 251b4cf\n")])])]),_c('p',[_c('span',[_c('span',{staticClass:"fas fa-arrow-down",attrs:{"aria-hidden":"true"}})])]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs diff"}},[_c('span',[_v("commit 5bc0e30635a754908dbdd3d2d833756cc4b52ef3\n")]),_c('span',[_v("Author: … < … >\n")]),_c('span',[_v("Date:   Sat Jul 8 16:50:27 2017 +0800\n")]),_c('span',[_v("\n")]),_c('span',[_v("    fruits.txt: replace banana with berries\n")]),_c('span',[_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("diff --git a/fruits.txt b/fruits.txt")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("index 15b57f7..17f4528 100644")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("--- a/fruits.txt")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-comment"}},[_v("+++ b/fruits.txt")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-meta"}},[_v("@@ -1,3 +1,3 @@")]),_v("\n")]),_c('span',[_v(" apples\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-deletion"}},[_v("-bananas")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"hljs-addition"}},[_v("+berries")]),_v("\n")]),_c('span',[_v(" cherries\n")])])])])])],1),_v(" "),_m(26),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Select the two points you want to compare using "),_c('kbd',[_v("Ctrl")]),_v("+"),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Click")]),_v(". The differences between the two selected versions will show up in the bottom half of SourceTree, as shown in the screenshot below.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/diff/images/sourcetree_2.png","height":"200"}}),_v(" "),_c('p'),_v(" "),_c('p',[_v("The same method can be used to compare the current state of the working directory (which might have uncommitted changes) to a point in the history.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/diff/images/sourcetree_3.png","height":"100"}}),_v(" "),_c('p')])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("diff")]),_v(" command can be used to view the differences between two points of the history.")]),_v(" "),_c('ul',[_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git diff")]),_v(": shows the changes (uncommitted) since the last commit.")]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git diff 0023cdd..fcd6199")]),_v(": shows the changes between the points indicated by commit hashes."),_c('br'),_v(" "),_c('span',{staticClass:"badge rounded-pill bg-warning text-dark"},[_c('span',{staticClass:"fas fa-lightbulb",attrs:{"aria-hidden":"true"}})]),_v(" Note that when using a commit hash in a Git command, you can use only the first few characters (e.g., first 7-10 chars) as that's usually enough for Git to locate the commit.")]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git diff v1.0..HEAD")]),_v(": shows changes that happened from the commit tagged as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v1.0")]),_v(" to the most recent commit.")])]),_v(" "),_c('panel',{attrs:{"expanded":""},scopedSlots:_u([{key:"header",fn:function(){return [_c('p',[_c('span',[_c('span',{staticClass:"fas fa-paperclip",attrs:{"aria-hidden":"true"}})]),_v(" Resources")])]},proxy:true}])},[_v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"https://www.git-tower.com/learn/git/ebook/en/command-line/advanced-topics/diffs"}},[_v("Git-Tower Tutorial: Inspecting Changes with Diffs")])]),_v(" "),_c('li',[_c('a',{attrs:{"href":"https://stackoverflow.com/questions/8640838/how-do-i-navigate-in-the-results-of-diff"}},[_v("How to view the next page of a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git")]),_v(" command result")])])])])],1)])],1)],1)]),_v(" "),_c('div',[_m(27),_v(" "),_c('div',[_c('p',[_c('strong',[_v("Git can load a specific version of the history to the working directory.")]),_v(" Note that if you have uncommitted changes in the working directory, you need to "),_c('trigger',{attrs:{"trigger":"click","for":"modal:checkout-stash"}},[_v("stash")]),_v(" them first to prevent them from being overwritten.")],1),_v(" "),_c('modal',{attrs:{"large":"","id":"modal:checkout-stash"},scopedSlots:_u([{key:"header",fn:function(){return [_v("Git & GitHub → Stash")]},proxy:true}])},[_v(" "),_c('div',[_c('div',{staticClass:"indented"},[_c('div'),_c('p'),_v(" "),_c('p',[_c('span',{staticClass:"badge bg-light text-dark"},[_c('span',[_c('span',{staticClass:"dimmed"},[_c('span',[_c('span',[_c('span',{staticClass:"fas fa-trophy",attrs:{"aria-hidden":"true"}})]),_v(" Can use Git to stash files")])])])])]),_c('p'),_c('p'),_v(" "),_c('p'),_v(" "),_c('div',[_c('p',[_c('strong',[_v("You can use Git's "),_c('mark',[_c('em',[_v("stash")])]),_v(" feature to temporarily shelve (or stash) changes you've made to your working copy")]),_v(" so that you can work on something else, and then come back and re-apply the stashed changes later on. "),_c('sub',[_v("-- adapted from "),_c('a',{attrs:{"href":"https://www.atlassian.com/git/tutorials/git-stash"}},[_v("Atlassian")])])]),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("Source Tree")]},proxy:true}])},[_v(" "),_c('p',[_v("Follow "),_c('a',{attrs:{"href":"https://confluence.atlassian.com/sourcetreekb/stash-a-file-with-sourcetree-785332122.html"}},[_v("this article from SourceTree creators")]),_v(". "),_c('span',{staticClass:"dimmed"},[_v("Note that the GUI shown in the article is slightly outdated but you should be able to map it to the current GUI.")])])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('p',[_v("Follow "),_c('a',{attrs:{"href":"https://www.atlassian.com/git/tutorials/git-stash"}},[_v("this article from Atlassian")]),_v(".")])])],1)],1),_v(" "),_c('div')])])]),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Double-click the commit you want to load to the working directory, or right-click on that commit and choose "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Checkout...")]),_v(".")]),_v(" "),_c('p',[_v("Click "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("OK")]),_v(" to the warning about ‘detached HEAD’ (similar to below).")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/checkout/images/warning.png","height":"140"}}),_v(" "),_c('p'),_v(" "),_c('p',[_v("The specified version is now loaded to the working folder, as indicated by the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("HEAD")]),_v(" label. "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("HEAD")]),_v(" is a reference to the currently checked out commit.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/checkout/images/sourcetree_4.png","height":"100"}}),_v(" "),_c('p'),_v(" "),_c('p',[_v("If you checkout a commit that comes before the commit in which you added the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".gitignore")]),_v(" file, Git will now show ignored files as ‘unstaged modifications’ because at that stage Git hasn’t been told to ignore those files.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/checkout/images/sourcetree_5.png","height":"260"}}),_v(" "),_c('p'),_v(" "),_c('p',[_v("To go back to the latest commit, double-click it.")])])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Use the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("checkout <commit-identifier>")]),_v(" command to change the working directory to the state it was in at a specific past commit.")]),_v(" "),_c('ul',[_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git checkout v1.0")]),_v(": loads the state as at commit tagged "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v1.0")])]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git checkout 0023cdd")]),_v(": loads the state as at commit with the hash "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("0023cdd")])]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git checkout HEAD~2")]),_v(": loads the state that is 2 commits behind the most recent commit")])]),_v(" "),_c('p',[_v("For now, you can ignore the warning about ‘detached HEAD’.")])])])],1)],1)]),_v(" "),_c('div',[_m(28),_v(" "),_c('div',[_m(29),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("Source Tree")]},proxy:true}])},[_v(" "),_c('p',[_v("Follow "),_c('a',{attrs:{"href":"https://confluence.atlassian.com/sourcetreekb/stash-a-file-with-sourcetree-785332122.html"}},[_v("this article from SourceTree creators")]),_v(". "),_c('span',{staticClass:"dimmed"},[_v("Note that the GUI shown in the article is slightly outdated but you should be able to map it to the current GUI.")])])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('p',[_v("Follow "),_c('a',{attrs:{"href":"https://www.atlassian.com/git/tutorials/git-stash"}},[_v("this article from Atlassian")]),_v(".")])])],1)],1)]),_v(" "),_c('div',[_m(30),_v(" "),_c('div',[_c('p',[_v("Given below is an example scenario you can try yourself to learn Git "),_c('trigger',{attrs:{"trigger":"click","for":"modal:gitCloning-rcsCloning"}},[_v("cloning")]),_v(".")],1),_v(" "),_c('modal',{attrs:{"large":"","id":"modal:gitCloning-rcsCloning"},scopedSlots:_u([{key:"header",fn:function(){return [_v("Project Management → Revision Control → Remote Repositories →")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_c('strong',[_v("You can "),_c('mark',[_c('em',[_v("clone")])]),_v(" a repo")]),_v(" to create a copy of that repo in another location on your computer. The copy will even have the revision history of the original repo i.e., identical to the original repo. For example, you can clone a remote repo onto your computer to create a local copy of the remote repo."),_c('br')])])]),_v(" "),_m(31),_v(" "),_c('box',{attrs:{"type":"warning"}},[_c('p',[_v("Note that the URL of the GitHub project is different from the URL you need to clone a repo in that GitHub project.\ne.g.")]),_v(" "),_c('p',[_v("GitHub project URL: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("https://github.com/se-edu/samplerepo-things")]),_v(" "),_c('br'),_v("\nGit repo URL: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("https://github.com/se-edu/samplerepo-things.git")]),_v(" (note the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".git")]),_v(" at the end)")])]),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("File")]),_v(" → "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Clone / New…")]),_v(" and provide the URL of the repo and the destination directory.")])])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("You can use the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("clone")]),_v(" command to clone a repo.")]),_v(" "),_c('p',[_v("Follow the instructions given "),_c('a',{attrs:{"href":"https://help.github.com/articles/cloning-a-repository/"}},[_v("here")]),_v(".")])])])],1)],1)]),_v(" "),_c('div',[_m(32),_v(" "),_c('div',[_c('p',[_v("Here's a scenario you can try in order to learn how to "),_c('trigger',{attrs:{"trigger":"click","for":"modal:githubPull-rcsPulling"}},[_v("pull")]),_v(" commits from another repo to yours.")],1),_v(" "),_c('modal',{attrs:{"large":"","id":"modal:githubPull-rcsPulling"},scopedSlots:_u([{key:"header",fn:function(){return [_v("Project Management → Revision Control → Remote Repositories →")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_c('strong',[_v("You can "),_c('mark',[_c('em',[_v("pull")])]),_v(" from one repo to another, to receive new commits in the second repo")]),_v(", if the repos have a shared history. Let's say some new commits were added to the "),_c('tooltip',{scopedSlots:_u([{key:"content",fn:function(){return [_c('em',[_v("upstream")]),_v(" repo is a term used to refer to the repo you cloned from")]},proxy:true}])},[_v("upstream repo")]),_v(" after you cloned it and you would like to copy over those new commits to your own clone i.e., "),_c('mark',[_v("sync")]),_v(" your clone with the upstream repo. In that case, you pull from the upstream repo to your clone.")],1)])]),_v(" "),_c('p',[_c('strong',[_v("1. Clone a repo")]),_v(" (e.g., the repo used in "),_c('trigger',{attrs:{"for":"modal:clone-repository","trigger":"click"}},[_v("[Git & GitHub → Clone]")]),_v(") to be used for this activity.")],1),_v(" "),_m(33),_v(" "),_c('modal',{attrs:{"large":"","id":"modal:clone-repository"},scopedSlots:_u([{key:"header",fn:function(){return [_c('strong',[_v("Clone Repository")])]},proxy:true}])},[_v(" "),_c('div',[_c('panel',{attrs:{"type":"seamless","expanded":""},scopedSlots:_u([{key:"header",fn:function(){return [_c('span',{staticClass:"card-title"},[_c('div',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("clone")]),_v(": Copying a repo")])])]},proxy:true}])},[_v(" "),_c('p',[_c('span',{staticClass:"badge bg-light text-dark"},[_c('span',[_c('span',{staticClass:"dimmed"},[_c('span',[_c('span',[_c('span',{staticClass:"fas fa-trophy",attrs:{"aria-hidden":"true"}})]),_v(" Can clone a remote repo")])])])])]),_c('p'),_c('p'),_v(" "),_c('p'),_v(" "),_c('div',[_c('p',[_v("Given below is an example scenario you can try yourself to learn Git "),_c('trigger',{attrs:{"trigger":"click","for":"modal:gitCloning-rcsCloning"}},[_v("cloning")]),_v(".")],1),_v(" "),_c('modal',{attrs:{"large":"","id":"modal:gitCloning-rcsCloning"},scopedSlots:_u([{key:"header",fn:function(){return [_v("Project Management → Revision Control → Remote Repositories →")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_c('strong',[_v("You can "),_c('mark',[_c('em',[_v("clone")])]),_v(" a repo")]),_v(" to create a copy of that repo in another location on your computer. The copy will even have the revision history of the original repo i.e., identical to the original repo. For example, you can clone a remote repo onto your computer to create a local copy of the remote repo."),_c('br')])])]),_v(" "),_c('p',[_v("Suppose you want to clone the sample repo "),_c('a',{attrs:{"href":"https://github.com/se-edu/samplerepo-things"}},[_v("samplerepo-things")]),_v(" to your computer.")]),_v(" "),_c('box',{attrs:{"type":"warning"}},[_c('p',[_v("Note that the URL of the GitHub project is different from the URL you need to clone a repo in that GitHub project.\ne.g.")]),_v(" "),_c('p',[_v("GitHub project URL: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("https://github.com/se-edu/samplerepo-things")]),_v(" "),_c('br'),_v("\nGit repo URL: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("https://github.com/se-edu/samplerepo-things.git")]),_v(" (note the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".git")]),_v(" at the end)")])]),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("File")]),_v(" → "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Clone / New…")]),_v(" and provide the URL of the repo and the destination directory.")])])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("You can use the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("clone")]),_v(" command to clone a repo.")]),_v(" "),_c('p',[_v("Follow the instructions given "),_c('a',{attrs:{"href":"https://help.github.com/articles/cloning-a-repository/"}},[_v("here")]),_v(".")])])])],1)],1),_v(" "),_c('div')])],1)]),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Right-click the target commit (i.e. the commit that is 2 commits behind the tip) and choose "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Reset current branch to this commit")]),_v(".")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/pull/images/rightClickOnTargetCommit.png","height":"100"}}),_v(" "),_c('p'),_v(" "),_c('p',[_v("Choose the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Hard - …")]),_v(" option and click "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("OK")]),_v(".")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/pull/images/sourcetree_1.png","height":"120"}}),_v(" "),_c('p'),_v(" "),_c('p',[_v("This is what you will see.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/pull/images/sourcetree_2.png","height":"150"}}),_v(" "),_c('p'),_v(" "),_c('p',[_v("Note the following (cross refer the screenshot above):")]),_v(" "),_c('p',[_v("Arrow marked as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("a")]),_v(": The local repo is now at this commit, marked by the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" label."),_c('br'),_v("\nArrow marked as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("b")]),_v(": The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("origin/master")]),_v(" label shows what is the latest commit in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch in the remote repo.")])])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Use the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("reset")]),_v(" command to delete commits at the tip of the revision history.")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("git reset --hard HEAD~2\n")])])])])])],1),_v(" "),_c('p',[_v("Now, your local repo state is exactly how it would be if you had cloned the repo 2 commits ago, as if somebody has added two more commits to the remote repo since you cloned it.")]),_v(" "),_m(34),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Click the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Pull")]),_v(" button in the main menu, choose "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("origin")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" in the next dialog, and click "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("OK")]),_v(".")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/pull/images/sourcetree_3.png","height":"160"}}),_v(" "),_c('p'),_v(" "),_c('p',[_v("Now you should see something like this where "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("origin/master")]),_v(" are both pointing the same commit.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/pull/images/sourcetree_4.png","height":"100"}}),_v(" "),_c('p')])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git pull origin")])])])])],1),_v(" "),_c('p'),_v(" "),_m(35),_v(" "),_c('box',[_c('div',{attrs:{"id":"section-working-with-multiple-remotes"}},[_c('h5',{attrs:{"id":"working-with-multiple-remotes"}},[_c('span',{staticClass:"anchor",attrs:{"id":"working-with-multiple-remotes"}}),_v("Working with multiple remotes"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#working-with-multiple-remotes","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_c('strong',[_v("When you clone a repo, Git automatically adds a "),_c('em',[_v("remote")]),_v(" repo named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("origin")])]),_v(" to your repo configuration. As you know, you can pull commits from that repo. As you know, "),_c('trigger',{attrs:{"trigger":"click","for":"modal:gitPull-rcsMultipleRepos"}},[_v("a Git repo can work with remote repos other than the one it was cloned from")]),_v(".")],1),_v(" "),_c('modal',{attrs:{"large":"","id":"modal:gitPull-rcsMultipleRepos"},scopedSlots:_u([{key:"header",fn:function(){return [_v("Project Management → Revision Control → Remote Repositories →")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_c('strong',[_v("A repo can work with any number of other repositories as long as they have a shared history")]),_v(" e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("repo1")]),_v(" can pull from (or push to) "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("repo2")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("repo3")]),_v(" if they have a shared history between them.")])])]),_v(" "),_c('p',[_c('strong',[_v("To communicate with another remote repo, you can first add it as a "),_c('em',[_v("remote")]),_v(" of your repo")]),_v(". Here is an example scenario you can follow to learn how to pull from another repo:")]),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('ol',[_c('li',[_c('p',[_v("Open the local repo in SourceTree. Suggested: Use your local clone of the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("samplerepo-things")]),_v(" repo.")])]),_v(" "),_c('li',[_c('p',[_v("Choose "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Repository")]),_v(" → "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Repository Settings")]),_v(" menu option.")])]),_v(" "),_c('li',[_c('p',[_v("Add a new "),_c('em',[_v("remote")]),_v(" to the repo with the following values.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/pull/images/fillRemoteInfoForSourceTree.png","width":"450"}}),_v(" "),_c('ul',[_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Remote name")]),_v(": the name you want to assign to the remote repo e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("upstream1")])]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("URL/path")]),_v(": the URL of your repo (ending in "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".git")]),_v(") that. Suggested: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("https://github.com/se-edu/samplerepo-things-2.git")]),_v(" ("),_c('a',{attrs:{"href":"https://github.com/se-edu/samplerepo-things-2"}},[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("samplerepo-things-2")])]),_v(" is another repo that has a shared history with "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("samplerepo-things")]),_v(")")]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Username")]),_v(": your GitHub username"),_c('br'),_c('br')])])]),_v(" "),_c('li',[_c('p',[_v("Now, you can pull from the added repo as you did before "),_c('mark',[_v("but choose the remote name of the repo you want to pull from")]),_v(" (instead of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("origin")]),_v("):"),_c('br'),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/pull/images/sourcetree_3.png","height":"160"}})]),_v(" "),_c('p'),_v(" "),_c('box',{attrs:{"type":"tip","seamless":""}},[_c('p',[_v("If the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Remote branch to pull")]),_v(" dropdown is empty, click the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Refresh")]),_v(" button on its right.")])])],1),_v(" "),_c('li',[_c('p',[_v("If the pull from the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("samplerepo-things-2")]),_v(" was successful, you should have received one more commit into your local repo.")])])])])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('ol',[_c('li',[_c('p',[_v("Navigate to the folder containing the local repo.")])]),_v(" "),_c('li',[_c('p',[_v("Set the new remote repo as a "),_c('em',[_v("remote")]),_v(" of the local repo."),_c('br'),_v("\ncommand: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git remote add {remote_name} {remote_repo_url}")]),_c('br'),_v("\ne.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git remote add upstream1 https://github.com/johndoe/foobar.git")])])]),_v(" "),_c('li',[_c('p',[_v("Now you can pull from the new remote."),_c('br'),_v("\ne.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git pull upstream1 master")])])])])])])],1)],1)])],1)]),_v(" "),_c('div',[_m(36),_v(" "),_c('div',[_c('div',{attrs:{"id":"simple-push"}},[_c('p',[_v("Given below is a scenario you can try in order to learn how to "),_c('trigger',{attrs:{"trigger":"click","for":"modal:githubPushing-rcsPushing"}},[_v("push")]),_v(" commits to a remote repo hosted on GitHub:")],1),_v(" "),_c('modal',{attrs:{"large":"","id":"modal:githubPushing-rcsPushing"},scopedSlots:_u([{key:"header",fn:function(){return [_v("Project Management → Revision Control → Remote Repositories →")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_c('strong',[_v("You can "),_c('mark',[_c('em',[_v("push")])]),_v(" new commits in one repo to another repo")]),_v(" which will copy the new commits onto the destination repo. Note that pushing to a repo requires you to have write-access to it. Furthermore, you can push between repos only if those repos have a shared history among them (i.e., one was created by copying the other at some point in the past).")])])]),_v(" "),_m(37),_v(" "),_m(38),_v(" "),_m(39),_v(" "),_m(40),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Click the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Push")]),_v(" button on the main menu, ensure the settings are as follows in the next dialog, and click the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Push")]),_v(" button on the dialog.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/push/images/sourcetree_1.png","height":"150"}}),_v(" "),_c('p'),_v(" "),_c('box',{attrs:{"type":"warning"}},[_c('p',[_v("Tags are not included in a normal push. Remember to tick "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Push all tags")]),_v(" when pushing to the remote repo if you want them to be pushed to the repo."),_c('br'),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/push/images/pushTags.png","width":"500"}})])])],1)]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Use the command "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git push origin master")]),_v(". Enter your Github username and password when prompted.")]),_v(" "),_c('box',{attrs:{"type":"warning"}},[_c('p',[_v("Tags are not included in a normal push. To push a tag, use this command: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git push origin <tag_name>")]),_v(" e.g. "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git push origin v1.0")])])])],1)])],1),_v(" "),_c('p')],1),_v(" "),_m(41),_v(" "),_c('ol',[_c('li',[_c('trigger',{attrs:{"trigger":"click","for":"modal:push-addRemoteForNormalPushing"}},[_v("Add the GitHub repo URL as a remote")]),_v(", if you haven't done so already.")],1),_v(" "),_c('li',[_v("Push to the target repo.")])]),_v(" "),_c('modal',{attrs:{"large":"","id":"modal:push-addRemoteForNormalPushing"},scopedSlots:_u([{key:"header",fn:function(){return [_v("Git & GitHub → Pull →")]},proxy:true}])},[_v(" "),_c('div',[_c('h5',{attrs:{"id":"working-with-multiple-remotes-2"}},[_c('span',{staticClass:"anchor",attrs:{"id":"working-with-multiple-remotes-2"}}),_v("Working with multiple remotes"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#working-with-multiple-remotes-2","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_c('strong',[_v("When you clone a repo, Git automatically adds a "),_c('em',[_v("remote")]),_v(" repo named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("origin")])]),_v(" to your repo configuration. As you know, you can pull commits from that repo. As you know, "),_c('trigger',{attrs:{"trigger":"click","for":"modal:gitPull-rcsMultipleRepos"}},[_v("a Git repo can work with remote repos other than the one it was cloned from")]),_v(".")],1),_v(" "),_c('modal',{attrs:{"large":"","id":"modal:gitPull-rcsMultipleRepos"},scopedSlots:_u([{key:"header",fn:function(){return [_v("Project Management → Revision Control → Remote Repositories →")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_c('strong',[_v("A repo can work with any number of other repositories as long as they have a shared history")]),_v(" e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("repo1")]),_v(" can pull from (or push to) "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("repo2")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("repo3")]),_v(" if they have a shared history between them.")])])]),_v(" "),_c('p',[_c('strong',[_v("To communicate with another remote repo, you can first add it as a "),_c('em',[_v("remote")]),_v(" of your repo")]),_v(". Here is an example scenario you can follow to learn how to pull from another repo:")]),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('ol',[_c('li',[_c('p',[_v("Open the local repo in SourceTree. Suggested: Use your local clone of the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("samplerepo-things")]),_v(" repo.")])]),_v(" "),_c('li',[_c('p',[_v("Choose "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Repository")]),_v(" → "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Repository Settings")]),_v(" menu option.")])]),_v(" "),_c('li',[_c('p',[_v("Add a new "),_c('em',[_v("remote")]),_v(" to the repo with the following values.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/pull/images/fillRemoteInfoForSourceTree.png","width":"450"}}),_v(" "),_c('ul',[_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Remote name")]),_v(": the name you want to assign to the remote repo e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("upstream1")])]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("URL/path")]),_v(": the URL of your repo (ending in "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".git")]),_v(") that. Suggested: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("https://github.com/se-edu/samplerepo-things-2.git")]),_v(" ("),_c('a',{attrs:{"href":"https://github.com/se-edu/samplerepo-things-2"}},[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("samplerepo-things-2")])]),_v(" is another repo that has a shared history with "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("samplerepo-things")]),_v(")")]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Username")]),_v(": your GitHub username"),_c('br'),_c('br')])])]),_v(" "),_c('li',[_c('p',[_v("Now, you can pull from the added repo as you did before "),_c('mark',[_v("but choose the remote name of the repo you want to pull from")]),_v(" (instead of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("origin")]),_v("):"),_c('br'),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/pull/images/sourcetree_3.png","height":"160"}})]),_v(" "),_c('p'),_v(" "),_c('box',{attrs:{"type":"tip","seamless":""}},[_c('p',[_v("If the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Remote branch to pull")]),_v(" dropdown is empty, click the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Refresh")]),_v(" button on its right.")])])],1),_v(" "),_c('li',[_c('p',[_v("If the pull from the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("samplerepo-things-2")]),_v(" was successful, you should have received one more commit into your local repo.")])])])])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('ol',[_c('li',[_c('p',[_v("Navigate to the folder containing the local repo.")])]),_v(" "),_c('li',[_c('p',[_v("Set the new remote repo as a "),_c('em',[_v("remote")]),_v(" of the local repo."),_c('br'),_v("\ncommand: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git remote add {remote_name} {remote_repo_url}")]),_c('br'),_v("\ne.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git remote add upstream1 https://github.com/johndoe/foobar.git")])])]),_v(" "),_c('li',[_c('p',[_v("Now you can pull from the new remote."),_c('br'),_v("\ne.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git pull upstream1 master")])])])])])])],1)],1)]),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('p',[_v("Push your repo to the new remote the usual way, but select the name of target remote instead of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("origin")]),_v(" and remember to select the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Track")]),_v(" checkbox."),_c('br'),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/push/images/pushToRemote.png","width":"470"}})])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('p',[_v("Push to the new remote the usual way  e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git push upstream1 master")]),_v(" (assuming you gave the name "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("upstream1")]),_v(" to the remote).")])])],1),_v(" "),_c('p'),_v(" "),_m(42),_v(" "),_m(43),_v(" "),_m(44),_v(" "),_c('p',[_c('strong',[_v("2. "),_c('trigger',{attrs:{"trigger":"click","for":"modal:push-addRemote"}},[_v("Add the GitHub repo URL as a remote")])],1),_v(" of the local repo. You can give it the name "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("origin")]),_v(" (or any other name).")]),_v(" "),_c('modal',{attrs:{"large":"","id":"modal:push-addRemote"},scopedSlots:_u([{key:"header",fn:function(){return [_v("Git & GitHub → Pull →")]},proxy:true}])},[_v(" "),_c('div',[_c('h5',{attrs:{"id":"working-with-multiple-remotes-3"}},[_c('span',{staticClass:"anchor",attrs:{"id":"working-with-multiple-remotes-3"}}),_v("Working with multiple remotes"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#working-with-multiple-remotes-3","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_c('strong',[_v("When you clone a repo, Git automatically adds a "),_c('em',[_v("remote")]),_v(" repo named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("origin")])]),_v(" to your repo configuration. As you know, you can pull commits from that repo. As you know, "),_c('trigger',{attrs:{"trigger":"click","for":"modal:gitPull-rcsMultipleRepos"}},[_v("a Git repo can work with remote repos other than the one it was cloned from")]),_v(".")],1),_v(" "),_c('modal',{attrs:{"large":"","id":"modal:gitPull-rcsMultipleRepos"},scopedSlots:_u([{key:"header",fn:function(){return [_v("Project Management → Revision Control → Remote Repositories →")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_c('strong',[_v("A repo can work with any number of other repositories as long as they have a shared history")]),_v(" e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("repo1")]),_v(" can pull from (or push to) "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("repo2")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("repo3")]),_v(" if they have a shared history between them.")])])]),_v(" "),_c('p',[_c('strong',[_v("To communicate with another remote repo, you can first add it as a "),_c('em',[_v("remote")]),_v(" of your repo")]),_v(". Here is an example scenario you can follow to learn how to pull from another repo:")]),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('ol',[_c('li',[_c('p',[_v("Open the local repo in SourceTree. Suggested: Use your local clone of the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("samplerepo-things")]),_v(" repo.")])]),_v(" "),_c('li',[_c('p',[_v("Choose "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Repository")]),_v(" → "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Repository Settings")]),_v(" menu option.")])]),_v(" "),_c('li',[_c('p',[_v("Add a new "),_c('em',[_v("remote")]),_v(" to the repo with the following values.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/pull/images/fillRemoteInfoForSourceTree.png","width":"450"}}),_v(" "),_c('ul',[_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Remote name")]),_v(": the name you want to assign to the remote repo e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("upstream1")])]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("URL/path")]),_v(": the URL of your repo (ending in "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".git")]),_v(") that. Suggested: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("https://github.com/se-edu/samplerepo-things-2.git")]),_v(" ("),_c('a',{attrs:{"href":"https://github.com/se-edu/samplerepo-things-2"}},[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("samplerepo-things-2")])]),_v(" is another repo that has a shared history with "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("samplerepo-things")]),_v(")")]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Username")]),_v(": your GitHub username"),_c('br'),_c('br')])])]),_v(" "),_c('li',[_c('p',[_v("Now, you can pull from the added repo as you did before "),_c('mark',[_v("but choose the remote name of the repo you want to pull from")]),_v(" (instead of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("origin")]),_v("):"),_c('br'),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/pull/images/sourcetree_3.png","height":"160"}})]),_v(" "),_c('p'),_v(" "),_c('box',{attrs:{"type":"tip","seamless":""}},[_c('p',[_v("If the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Remote branch to pull")]),_v(" dropdown is empty, click the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Refresh")]),_v(" button on its right.")])])],1),_v(" "),_c('li',[_c('p',[_v("If the pull from the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("samplerepo-things-2")]),_v(" was successful, you should have received one more commit into your local repo.")])])])])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('ol',[_c('li',[_c('p',[_v("Navigate to the folder containing the local repo.")])]),_v(" "),_c('li',[_c('p',[_v("Set the new remote repo as a "),_c('em',[_v("remote")]),_v(" of the local repo."),_c('br'),_v("\ncommand: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git remote add {remote_name} {remote_repo_url}")]),_c('br'),_v("\ne.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git remote add upstream1 https://github.com/johndoe/foobar.git")])])]),_v(" "),_c('li',[_c('p',[_v("Now you can pull from the new remote."),_c('br'),_v("\ne.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git pull upstream1 master")])])])])])])],1)],1)]),_v(" "),_m(45),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/push/images/pushToRemote.png","width":"470"}})]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('p',[_v("Push each branch to the new remote the usual way "),_c('mark',[_v("but use the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("-u")]),_v(" flag")]),_v(" to inform Git that you wish to "),_c('tooltip',{scopedSlots:_u([{key:"content",fn:function(){return [_v("i.e., remember which branch in the remote repo corresponds to which branch in the local repo")]},proxy:true}])},[_v("track")]),_v(" the branch."),_c('br'),_v("\ne.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git push -u origin master")])],1)])],1)],1)]),_v(" "),_c('div',[_m(46),_v(" "),_c('div',[_m(47),_v(" "),_m(48),_v(" "),_c('p',[_v("Given below is an illustration of how branch labels move as branches evolve.")]),_v(" "),_c('pic',{attrs:{"src":"/se-book/gitAndGithub/branch/images/branchesAsLabels1.png","width":"650"}}),_v(" "),_m(49),_v(" "),_c('pic',{attrs:{"src":"/se-book/gitAndGithub/branch/images/branchesAsLabels2.png","width":"600"}}),_v(" "),_m(50),_v(" "),_m(51),_v(" "),_m(52),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('img',{attrs:{"src":"/se-book/gitAndGithub/branch/images/onMasterBranch.png","height":"120"}}),_v(" "),_c('p')])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("git status\n")])])]),_c('p',[_c('span',[_c('span',{staticClass:"fas fa-arrow-down",attrs:{"aria-hidden":"true"}})])]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("on branch master\n")])])])])])],1),_v(" "),_m(53),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Click on the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Branch")]),_v(" button on the main menu. In the next dialog, enter the branch name and click "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Create Branch")]),_v(".")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/branch/images/sourcetree_1.png","height":"150"}}),_v(" "),_c('p'),_v(" "),_c('p',[_v("Note how the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("feature1")]),_v(" is indicated as the current branch.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/branch/images/sourcetree_2.png","height":"150"}}),_v(" "),_c('p')])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("You can use the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("branch")]),_v(" command to create a new branch and the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("checkout")]),_v(" command to switch to a specific branch.")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("git branch feature1\n")]),_c('span',[_v("git checkout feature1\n")])])]),_c('p',[_v("One-step shortcut to create a branch and switch to it at the same time:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("git checkout –b feature1\n")])])])])])],1),_v(" "),_m(54),_v(" "),_m(55),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Double-click the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/branch/images/sourcetree_3.png","height":"150"}}),_v(" "),_c('p')])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("git checkout master\n")])])])])])],1),_v(" "),_m(56),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/branch/images/sourcetree_4.png","height":"100"}}),_v(" "),_c('p'),_v(" "),_m(57),_v(" "),_m(58),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/branch/images/sourcetree_5.png","height":"120"}}),_v(" "),_c('p'),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Right-click on the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch and choose "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("merge master into the current branch")]),_v(". Click "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("OK")]),_v(" in the next dialog.")])])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("git merge master\n")])])])])])],1),_v(" "),_m(59),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_c('p',[_v("Instead of merging "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("feature1")]),_v(", an alternative is to "),_c('a',{attrs:{"href":"https://www.atlassian.com/git/tutorials/merging-vs-rebasing"}},[_c('em',[_v("rebase")])]),_v(" the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("feature1")]),_v(" branch. However, rebasing is an advanced feature that requires modifying past commits. If you modify past commits that have been pushed to a remote repository, you'll have to "),_c('a',{attrs:{"href":"https://www.datree.io/resources/git-push-force"}},[_c('em',[_v("force-push")])]),_v(" the modified commit to the remote repo in order to update the commits in it.")])]),_v(" "),_m(60),_v(" "),_m(61),_v(" "),_m(62),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/branch/images/sourcetree_6.png","height":"150"}}),_v(" "),_c('p'),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('p',[_v("Right-click on the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("feature1")]),_v(" branch and choose "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Merge...")]),_v(".")])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("git merge feature1\n")])])])])],1),_v(" "),_m(63),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/branch/images/addCountriesBranchBeforeMerging.png","height":"80"}}),_v(" "),_c('p'),_v(" "),_c('box',{attrs:{"type":"wrong","seamless":""}},[_c('p',[_c('strong',{staticClass:"text-danger"},[_v("Avoid this common rookie mistake!")])]),_v(" "),_c('p',[_c('mark',[_v("Always remember to switch back to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch before creating a new branch.")]),_v(" If not, your new branch will be created on top of the current branch.")])]),_v(" "),_m(64),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/branch/images/addCountriesBranchNoFastForward.png","height":"100"}}),_v(" "),_c('p'),_v(" "),_c('p',[_v("... you are likely to see something like this instead:")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/branch/images/addCountriesBranchAfterMerging.png","height":"80"}}),_v(" "),_c('p'),_v(" "),_m(65),_v(" "),_m(66),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Tick the box shown below when you merge a branch:")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/branch/images/mergeBranchDialog.png","height":"150"}}),_v(" "),_c('p')])]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Use the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("--no-ff")]),_v(" switch (short for "),_c('em',[_v("no fast forward")]),_v("):")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("git merge --no-ff add-countries\n")])])])])])],1),_v(" "),_c('box',[_c('div',{attrs:{"id":"pushing-a-branch"}},[_c('h5',{attrs:{"id":"pushing-a-branch-to-a-remote-repo"}},[_c('span',{staticClass:"anchor",attrs:{"id":"pushing-a-branch-to-a-remote-repo"}}),_v("Pushing a branch to a remote repo"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#pushing-a-branch-to-a-remote-repo","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("Here's how to push a branch to a remote repo:")]),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('p',[_v("Here's how to push a branch named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("add-intro")]),_v(" to your own fork of a repo named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("samplerepo-pr-practice")]),_v(":")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/branch/images/pushBranchToFork.png","height":"300"}}),_v(" "),_c('p')]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('p',[_v("Normally: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git push {remote repository} {branch}")]),_v(". Examples:"),_c('br')]),_v(" "),_c('ul',[_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git push origin master")]),_v(" pushes the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch to the repo named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("origin")]),_v(" (i.e., the repo you cloned from)")]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git push upstream-repo add-intro")]),_v(" pushes the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("add-intro")]),_v(" branch to the repo named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("upstream-repo")])])]),_v(" "),_c('p',[_c('strong',[_v("If pushing a branch you created locally to the remote for the "),_c('em',[_v("first time")])]),_v(", add the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("-u")]),_v(" flag to get the local branch to track the new upstream branch:"),_c('br'),_v("\ne.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git push -u origin add-intro")])]),_v(" "),_c('p',[_c('span',[_c('span',{staticClass:"fas fa-paperclip",attrs:{"aria-hidden":"true"}})]),_v(" See "),_c('a',{attrs:{"href":"https://git-scm.com/docs/git-push"}},[_v("git-scm.com/docs/git-push")]),_v(" for details of the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("push")]),_v(" command.")])])],1),_v(" "),_c('p')],1)])],1)]),_v(" "),_m(67),_v(" "),_c('div',[_m(68),_v(" "),_c('div',[_c('p',[_v("Suppose you want to propose some changes to a GitHub repo (e.g., "),_c('a',{attrs:{"href":"https://github.com/se-edu/samplerepo-pr-practice"}},[_v("samplerepo-pr-practice")]),_v(") as a "),_c('trigger',{attrs:{"trigger":"click","for":"modal:githubPullRequests-rcsPullRequests"}},[_v("pull request (PR)")]),_v(". Here is a scenario you can try in order to learn how to create PRs:")],1),_v(" "),_c('modal',{attrs:{"large":"","id":"modal:githubPullRequests-rcsPullRequests"},scopedSlots:_u([{key:"header",fn:function(){return [_v("Project Management → Revision Control → Remote Repositories →")]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_c('strong',[_v("A "),_c('mark',[_c('em',[_v("pull request")])]),_v(" (PR for short) is a mechanism for contributing code to a remote repo,")]),_v(" i.e., \"I'm "),_c('em',[_v("requesting")]),_v(" you to "),_c('em',[_v("pull")]),_v(" my proposed changes to your repo\". For this to work, the two repos must have a shared history. The most common case is sending PRs from a fork to its "),_c('tooltip',{scopedSlots:_u([{key:"content",fn:function(){return [_c('em',[_v("upstream")]),_v(" repo is a repo you forked from")]},proxy:true}])},[_v("upstream")]),_v(" repo.")],1)])]),_v(" "),_m(69),_v(" "),_m(70),_v(" "),_m(71),_v(" "),_m(72),_v(" "),_c('p',[_c('strong',[_v("4. Push")]),_v(" the branch you updated (i.e., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch or the new branch) to your fork, as explained "),_c('trigger',{attrs:{"trigger":"click","for":"modal:createPr-pushBranch"}},[_v("here")]),_v(".")],1),_v(" "),_c('modal',{attrs:{"large":"","id":"modal:createPr-pushBranch"},scopedSlots:_u([{key:"header",fn:function(){return [_v("Git & GitHub → Branch →")]},proxy:true}])},[_v(" "),_c('div',[_c('h5',{attrs:{"id":"pushing-a-branch-to-a-remote-repo-2"}},[_c('span',{staticClass:"anchor",attrs:{"id":"pushing-a-branch-to-a-remote-repo-2"}}),_v("Pushing a branch to a remote repo"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#pushing-a-branch-to-a-remote-repo-2","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("Here's how to push a branch to a remote repo:")]),_v(" "),_c('tabs',[_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("SourceTree")]},proxy:true}])},[_v(" "),_c('p',[_v("Here's how to push a branch named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("add-intro")]),_v(" to your own fork of a repo named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("samplerepo-pr-practice")]),_v(":")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/branch/images/pushBranchToFork.png","height":"300"}}),_v(" "),_c('p')]),_v(" "),_c('tab',{scopedSlots:_u([{key:"header",fn:function(){return [_v("CLI")]},proxy:true}])},[_v(" "),_c('p',[_v("Normally: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git push {remote repository} {branch}")]),_v(". Examples:"),_c('br')]),_v(" "),_c('ul',[_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git push origin master")]),_v(" pushes the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch to the repo named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("origin")]),_v(" (i.e., the repo you cloned from)")]),_v(" "),_c('li',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git push upstream-repo add-intro")]),_v(" pushes the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("add-intro")]),_v(" branch to the repo named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("upstream-repo")])])]),_v(" "),_c('p',[_c('strong',[_v("If pushing a branch you created locally to the remote for the "),_c('em',[_v("first time")])]),_v(", add the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("-u")]),_v(" flag to get the local branch to track the new upstream branch:"),_c('br'),_v("\ne.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git push -u origin add-intro")])]),_v(" "),_c('p',[_c('span',[_c('span',{staticClass:"fas fa-paperclip",attrs:{"aria-hidden":"true"}})]),_v(" See "),_c('a',{attrs:{"href":"https://git-scm.com/docs/git-push"}},[_v("git-scm.com/docs/git-push")]),_v(" for details of the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("push")]),_v(" command.")])])],1),_v(" "),_c('p')],1)]),_v(" "),_m(73),_v(" "),_c('ol',[_m(74),_v(" "),_c('li',[_c('p',[_v("Click on the "),_c('span',{staticClass:"tab"},[_c('span',{staticClass:"dimmed"},[_c('svg',{staticClass:"octicon octicon-git-pull-request",attrs:{"version":"1.1","width":"16","height":"16","viewBox":"0 0 16 16","aria-hidden":"true"}},[_c('path',{attrs:{"fill-rule":"evenodd","d":"M7.177 3.073L9.573.677A.25.25 0 0110 .854v4.792a.25.25 0 01-.427.177L7.177 3.427a.25.25 0 010-.354zM3.75 2.5a.75.75 0 100 1.5.75.75 0 000-1.5zm-2.25.75a2.25 2.25 0 113 2.122v5.256a2.251 2.251 0 11-1.5 0V5.372A2.25 2.25 0 011.5 3.25zM11 2.5h-1V4h1a1 1 0 011 1v5.628a2.251 2.251 0 101.5 0V5A2.5 2.5 0 0011 2.5zm1 10.25a.75.75 0 111.5 0 .75.75 0 01-1.5 0zM3.75 12a.75.75 0 100 1.5.75.75 0 000-1.5z"}})])]),_v(" Pull requests")]),_v(" tab followed by the "),_c('span',{staticClass:"btn btn-success pl-1 pr-1 pb-0 pt-0"},[_v("New pull request")]),_v(" "),_c('strong',[_v("button")]),_v(". This will bring you to the 'Comparing changes' page.")])]),_v(" "),_c('li',[_c('p',[_v("Set the appropriate target repo and the branch that should receive your PR, using the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("base repository")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("base")]),_v(" dropdowns. e.g.,"),_c('br'),_v(" "),_c('span',{staticClass:"btn btn-light border"},[_v("base repository: "),_c('strong',[_v("se-edu/samplerepo-pr-practice")]),_v(" "),_c('svg',{staticClass:"octicon octicon-triangle-down",attrs:{"version":"1.1","width":"16","height":"16","viewBox":"0 0 16 16","aria-hidden":"true"}},[_c('path',{attrs:{"d":"M4.427 7.427l3.396 3.396a.25.25 0 00.354 0l3.396-3.396A.25.25 0 0011.396 7H4.604a.25.25 0 00-.177.427z"}})])]),_v(" "),_c('span',{staticClass:"btn btn-light border"},[_v("base: "),_c('strong',[_v("master")]),_v(" "),_c('svg',{staticClass:"octicon octicon-triangle-down",attrs:{"version":"1.1","width":"16","height":"16","viewBox":"0 0 16 16","aria-hidden":"true"}},[_c('path',{attrs:{"d":"M4.427 7.427l3.396 3.396a.25.25 0 00.354 0l3.396-3.396A.25.25 0 0011.396 7H4.604a.25.25 0 00-.177.427z"}})])]),_c('br')]),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_c('p',[_v("Normally, the default value shown in the dropdown is what you want but in case your fork has "),_c('popover',{scopedSlots:_u([{key:"content",fn:function(){return [_v("e.g., the repo you forked from is also a fork of a another repo, which means both of those are considered upstream repos of your fork")]},proxy:true}])},[_v("multiple upstream repos")]),_v(", the default may not be what you want.")],1)])],1),_v(" "),_c('li',[_c('p',[_v("Indicate which repo:branch contains your proposed code, using the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("head repository")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("compare")]),_v(" dropdowns. e.g.,"),_c('br'),_v(" "),_c('span',{staticClass:"btn btn-light border"},[_v("head repository: "),_c('strong',[_v("myrepo/samplerepo-pr-practice")]),_v(" "),_c('svg',{staticClass:"octicon octicon-triangle-down",attrs:{"version":"1.1","width":"16","height":"16","viewBox":"0 0 16 16","aria-hidden":"true"}},[_c('path',{attrs:{"d":"M4.427 7.427l3.396 3.396a.25.25 0 00.354 0l3.396-3.396A.25.25 0 0011.396 7H4.604a.25.25 0 00-.177.427z"}})])]),_v(" "),_c('span',{staticClass:"btn btn-light border"},[_v("compare: "),_c('strong',[_v("master")]),_v(" "),_c('svg',{staticClass:"octicon octicon-triangle-down",attrs:{"version":"1.1","width":"16","height":"16","viewBox":"0 0 16 16","aria-hidden":"true"}},[_c('path',{attrs:{"d":"M4.427 7.427l3.396 3.396a.25.25 0 00.354 0l3.396-3.396A.25.25 0 0011.396 7H4.604a.25.25 0 00-.177.427z"}})])]),_c('br')])])]),_v(" "),_c('p',[_c('strong',[_v("6. Verify the proposed code")]),_v(": Verify that the diff view in the page shows the exact change you intend to propose. If it doesn't, "),_c('tooltip',{scopedSlots:_u([{key:"content",fn:function(){return [_v("commit the new code and push to the branch")]},proxy:true}])},[_v("update the branch")]),_v(" as necessary.")],1),_v(" "),_m(75),_v(" "),_c('span',{attrs:{"id":"submit-the-pr"}},[_c('ol',[_c('li',[_c('p',[_v("Click the "),_c('span',{staticClass:"btn btn-success pl-1 pr-1 pb-0 pt-0"},[_c('span',[_c('svg',{staticClass:"octicon octicon-git-pull-request",attrs:{"version":"1.1","width":"16","height":"16","viewBox":"0 0 16 16","aria-hidden":"true"}},[_c('path',{attrs:{"fill-rule":"evenodd","d":"M7.177 3.073L9.573.677A.25.25 0 0110 .854v4.792a.25.25 0 01-.427.177L7.177 3.427a.25.25 0 010-.354zM3.75 2.5a.75.75 0 100 1.5.75.75 0 000-1.5zm-2.25.75a2.25 2.25 0 113 2.122v5.256a2.251 2.251 0 11-1.5 0V5.372A2.25 2.25 0 011.5 3.25zM11 2.5h-1V4h1a1 1 0 011 1v5.628a2.251 2.251 0 101.5 0V5A2.5 2.5 0 0011 2.5zm1 10.25a.75.75 0 111.5 0 .75.75 0 01-1.5 0zM3.75 12a.75.75 0 100 1.5.75.75 0 000-1.5z"}})])]),_v(" Create pull request")]),_v(" button.")])]),_v(" "),_m(76),_v(" "),_c('li',[_c('p',[_v("If you want to indicate that the PR you are about to create is 'still work in progress, not yet ready', click on the dropdown arrow in the "),_c('span',{staticClass:"btn btn-success pl-1 pr-1 pb-0 pt-0"},[_v(" Create pull request "),_c('svg',{staticClass:"octicon octicon-triangle-down",attrs:{"version":"1.1","width":"16","height":"16","viewBox":"0 0 16 16","aria-hidden":"true"}},[_c('path',{attrs:{"d":"M4.427 7.427l3.396 3.396a.25.25 0 00.354 0l3.396-3.396A.25.25 0 0011.396 7H4.604a.25.25 0 00-.177.427z"}})])]),_v(" button and choose "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Create draft pull request")]),_v(" option.")])]),_v(" "),_c('li',[_c('p',[_v("Click the "),_c('span',{staticClass:"btn btn-success pl-1 pr-1 pb-0 pt-0"},[_v(" Create pull request "),_c('svg',{staticClass:"octicon octicon-triangle-down",attrs:{"version":"1.1","width":"16","height":"16","viewBox":"0 0 16 16","aria-hidden":"true"}},[_c('path',{attrs:{"d":"M4.427 7.427l3.396 3.396a.25.25 0 00.354 0l3.396-3.396A.25.25 0 0011.396 7H4.604a.25.25 0 00-.177.427z"}})])]),_v(" button to create the PR."),_c('br')])]),_v(" "),_m(77)])]),_c('p'),_v(" "),_m(78),_v(" "),_m(79),_v(" "),_m(80),_v(" "),_m(81),_v(" "),_m(82),_v(" "),_m(83),_v(" "),_c('panel',{attrs:{"expanded":""},scopedSlots:_u([{key:"header",fn:function(){return [_c('p',[_c('span',[_c('span',{staticClass:"fas fa-paperclip",attrs:{"aria-hidden":"true"}})]),_v(" Resources")])]},proxy:true}])},[_v(" "),_c('ul',[_c('li',[_c('a',{attrs:{"href":"https://help.github.com/articles/creating-a-pull-request/"}},[_v("GitHub's own documentation on creating a PR")])])])])],1)]),_v(" "),_c('div',[_m(84),_v(" "),_c('div',[_m(85),_v(" "),_c('p',[_v("Given below are some steps you can follow when reviewing a PR.")]),_v(" "),_m(86),_v(" "),_c('ol',[_c('li',[_v("Go to the GitHub page of the repo.")]),_v(" "),_c('li',[_v("Click on the "),_c('span',{staticClass:"tab"},[_c('span',[_c('svg',{staticClass:"octicon octicon-git-pull-request",attrs:{"version":"1.1","width":"16","height":"16","viewBox":"0 0 16 16","aria-hidden":"true"}},[_c('path',{attrs:{"fill-rule":"evenodd","d":"M7.177 3.073L9.573.677A.25.25 0 0110 .854v4.792a.25.25 0 01-.427.177L7.177 3.427a.25.25 0 010-.354zM3.75 2.5a.75.75 0 100 1.5.75.75 0 000-1.5zm-2.25.75a2.25 2.25 0 113 2.122v5.256a2.251 2.251 0 11-1.5 0V5.372A2.25 2.25 0 011.5 3.25zM11 2.5h-1V4h1a1 1 0 011 1v5.628a2.251 2.251 0 101.5 0V5A2.5 2.5 0 0011 2.5zm1 10.25a.75.75 0 111.5 0 .75.75 0 01-1.5 0zM3.75 12a.75.75 0 100 1.5.75.75 0 000-1.5z"}})])]),_v(" Pull requests")]),_v(" tab.")]),_v(" "),_c('li',[_v("Click on the PR you want to review.")])]),_v(" "),_m(87),_v(" "),_c('p',[_c('strong',[_v("3. Click on the")]),_v(" "),_c('span',{staticClass:"tab"},[_c('svg',{staticClass:"octicon octicon-diff",attrs:{"version":"1.1","width":"16","height":"16","viewBox":"0 0 16 16","aria-hidden":"true"}},[_c('path',{attrs:{"fill-rule":"evenodd","d":"M8.75 1.75a.75.75 0 00-1.5 0V5H4a.75.75 0 000 1.5h3.25v3.25a.75.75 0 001.5 0V6.5H12A.75.75 0 0012 5H8.75V1.75zM4 13a.75.75 0 000 1.5h8a.75.75 0 100-1.5H4z"}})]),_v(" Files changed")]),_v(" tab to see the "),_c('em',[_v("diff")]),_v(" view.")]),_v(" "),_m(88),_v(" "),_c('ol',[_c('li',[_v("Hover over the line you want to comment on and click on the "),_m(89),_v(" icon that appears on the left margin. That should create a text box for you to enter your comment.\n"),_c('ul',[_c('li',[_m(90),_v(" To give a comment related to multiple lines, click-and-drag the "),_m(91),_v(" icon. The result will look like this:"),_c('br'),_v(" "),_c('pic',{attrs:{"src":"/se-book/gitAndGithub/reviewPRs/images/addCommentForMultipleLines.png"}})],1)])]),_v(" "),_c('li',[_v("Enter your comment."),_c('br'),_v(" "),_c('ul',[_m(92),_v(" "),_c('li',[_m(93),_v(" To suggest an in-line code change, click on this icon:"),_c('br'),_v(" "),_c('pic',{attrs:{"src":"/se-book/gitAndGithub/reviewPRs/images/giveInlineSuggestion.png"}}),_c('br'),_v("\nThe comment will look like this to the viewers:"),_c('br'),_v(" "),_c('pic',{attrs:{"src":"/se-book/gitAndGithub/reviewPRs/images/giveInlineSuggestionPreview.png"}}),_c('br')],1)])]),_v(" "),_c('li',[_v("After typing in the comment, click on the "),_c('span',{staticClass:"btn btn-success pl-1 pr-1 pb-0 pt-0"},[_v("Start a review")]),_v(" button (not the "),_c('span',{staticClass:"btn btn-light pl-1 pr-1 pb-0 pt-0 border"},[_v("Add single comment")]),_v(" button. This way, your comment is saved but not visible to others yet. It will be visible to others only when you have finished the entire review."),_c('br'),_v(" "),_c('pic',{attrs:{"src":"/se-book/gitAndGithub/reviewPRs/images/addComment.png","width":"800"}}),_c('p')],1),_v(" "),_c('li',[_v("Repeat the above steps to add more comments.")])]),_v(" "),_c('p',[_c('strong',[_v("5. Submit the review:")]),_c('br'),_v(" "),_c('pic',{attrs:{"src":"/se-book/gitAndGithub/reviewPRs/images/submitReview.png","width":"500"}})],1),_v(" "),_c('p'),_v(" "),_c('ol',[_c('li',[_v("When there are no more comments to add, click on the "),_c('span',{staticClass:"btn btn-success pl-1 pr-1 pb-0 pt-0"},[_v("Review changes "),_c('svg',{staticClass:"octicon octicon-triangle-down",attrs:{"version":"1.1","width":"16","height":"16","viewBox":"0 0 16 16","aria-hidden":"true"}},[_c('path',{attrs:{"d":"M4.427 7.427l3.396 3.396a.25.25 0 00.354 0l3.396-3.396A.25.25 0 0011.396 7H4.604a.25.25 0 00-.177.427z"}})])]),_v(" button (on the top right of the diff page).")]),_v(" "),_m(94),_v(" "),_m(95)])])]),_v(" "),_c('div',[_m(96),_v(" "),_c('div',[_c('p',[_v("Let's look at the steps involved in merging a PR, assuming the PR has been reviewed, refined, and approved for merging already.")]),_v(" "),_c('p',[_v("Preparation: If you would like to try merging a PR yourself, you can create a dummy PR in the following manner.")]),_v(" "),_m(97),_v(" "),_m(98),_v(" "),_c('p',[_m(99),_v(" and scroll to the bottom. You'll see a panel containing the PR status summary."),_c('br'),_v(" "),_c('pic',{attrs:{"src":"/se-book/gitAndGithub/managePRs/images/mergePr.png","width":"800"}})],1),_v(" "),_c('p',[_c('strong',[_v("3. If the PR is not merge-able in the current state")]),_v(", the "),_c('span',{staticClass:"btn btn-light pl-1 pr-1 pb-0 pt-0 border"},[_v("Merge pull request "),_c('svg',{staticClass:"octicon octicon-triangle-down",attrs:{"version":"1.1","width":"16","height":"16","viewBox":"0 0 16 16","aria-hidden":"true"}},[_c('path',{attrs:{"d":"M4.427 7.427l3.396 3.396a.25.25 0 00.354 0l3.396-3.396A.25.25 0 0011.396 7H4.604a.25.25 0 00-.177.427z"}})])]),_v(" will not be green. Here are the possible reasons and remedies:")]),_v(" "),_c('ul',[_m(100),_v(" "),_c('li',[_c('strong',[_v("Problem: There are merge conflicts")]),_v(", indicated by the message "),_m(101),_v(". That means the repo's "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch has been updated since the PR code was last updated, in a way that the PR code conflicts with the current "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch. Those "),_c('trigger',{attrs:{"trigger":"click","for":"modal:managePRs-mergeConflics"}},[_v("conflicts must be resolved")]),_v("  before the PR can be merged.\n"),_m(102)],1)]),_v(" "),_c('modal',{attrs:{"large":"","id":"modal:managePRs-mergeConflics"},scopedSlots:_u([{key:"header",fn:function(){return [_v("Tools → Git & GitHub → Merge Conflicts")]},proxy:true}])},[_v(" "),_c('div',[_c('div'),_c('p'),_v(" "),_c('p',[_c('span',{staticClass:"dimmed"},[_c('strong',[_c('span',[_v("Tools → Git and GitHub →\n")])])])]),_v(" "),_c('div',{attrs:{"id":"title-and-body"}},[_c('div',[_c('h4',{attrs:{"id":"dealing-with-merge-conflicts-2"}},[_c('span',{staticClass:"anchor",attrs:{"id":"dealing-with-merge-conflicts-2"}}),_c('span',[_v("Dealing with merge conflicts")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#dealing-with-merge-conflicts-2","onclick":"event.stopPropagation()"}})])]),_v(" "),_c('div',{attrs:{"id":"main"}},[_c('div',[_c('p',[_c('strong',[_v("Merge conflicts happen when you try to combine two incompatible versions")]),_v(" (e.g., merging a branch to another but each branch changed the same part of the code in a different way).")]),_v(" "),_c('p',[_v("Here are the steps to simulate a merge conflict and use it to learn how to resolve merge conflicts.")]),_v(" "),_c('p',[_c('strong',[_v("0. Create an empty repo or clone an existing repo")]),_v(", to be used for this activity.")]),_v(" "),_c('p',[_c('strong',[_v("1. Start a branch named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fix1")]),_v(" in the repo. Create a commit")]),_v(" that adds a line with some text to one of the files.")]),_v(" "),_c('p',[_c('strong',[_v("2. Switch back to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch. Create a commit with a conflicting change")]),_v(" i.e. it adds a line with some different text in the exact location the previous line was added.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/mergeConflicts/images/sourcetree_1.png","height":"350"}}),_v(" "),_c('p'),_v(" "),_c('p',[_c('strong',[_v("3. Try to merge the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fix1")]),_v(" branch onto the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch.")]),_v(" Git will pause mid-way during the merge and report a merge conflict. If you open the conflicted file, you will see something like this:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs txt"}},[_c('span',[_v("COLORS\n")]),_c('span',[_v("------\n")]),_c('span',[_v("blue\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"highlighted"}},[_v("<<<<<< HEAD")]),_v("\n")]),_c('span',[_v("black\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"highlighted"}},[_v("=======")]),_v("\n")]),_c('span',[_v("green\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"highlighted"}},[_v(">>>>>> fix1")]),_v("\n")]),_c('span',[_v("red\n")]),_c('span',[_v("white\n")])])]),_c('p',[_c('strong',[_v("4. Observe how the conflicted part is marked")]),_v(" between a line starting with "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("<<<<<< ")]),_v(" and a line starting with "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(">>>>>>")]),_v(", separated by another line starting with "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("=======")]),_v(".")]),_v(" "),_c('p',[_v("Highlighted below is the conflicting part that is coming from the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"style":"counter-reset: line 2;","class":"line-numbers hljs txt"}},[_c('span',[_v("blue\n")]),_c('span',[_v("<<<<<< HEAD\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"highlighted"}},[_v("black")]),_v("\n")]),_c('span',[_v("=======\n")]),_c('span',[_v("green\n")]),_c('span',[_v(">>>>>> fix1\n")]),_c('span',[_v("red\n")])])]),_c('p',[_v("This is the conflicting part that is coming from the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fix1")]),_v(" branch:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"style":"counter-reset: line 2;","class":"line-numbers hljs txt"}},[_c('span',[_v("blue\n")]),_c('span',[_v("<<<<<< HEAD\n")]),_c('span',[_v("black\n")]),_c('span',[_v("=======\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"highlighted"}},[_v("green")]),_v("\n")]),_c('span',[_v(">>>>>> fix1\n")]),_c('span',[_v("red\n")])])]),_c('p',[_c('strong',[_v("5. Resolve the conflict by editing the file")]),_v(". Let us assume you want to keep both lines in the merged version. You can modify the file to be like this:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs txt"}},[_c('span',[_v("COLORS\n")]),_c('span',[_v("------\n")]),_c('span',[_v("blue\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"highlighted"}},[_v("black")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"highlighted"}},[_v("green")]),_v("\n")]),_c('span',[_v("red\n")]),_c('span',[_v("white\n")])])]),_c('p',[_c('strong',[_v("6. Stage the changes, and commit.")])])]),_v(" "),_c('div')])])])]),_v(" "),_c('p',[_c('strong',[_v("3. Merge the PR")]),_v(" by clicking on the "),_c('span',{staticClass:"btn btn-success pl-1 pr-1 pb-0 pt-0"},[_v("Merge pull request "),_c('svg',{staticClass:"octicon octicon-triangle-down",attrs:{"version":"1.1","width":"16","height":"16","viewBox":"0 0 16 16","aria-hidden":"true"}},[_c('path',{attrs:{"d":"M4.427 7.427l3.396 3.396a.25.25 0 00.354 0l3.396-3.396A.25.25 0 0011.396 7H4.604a.25.25 0 00-.177.427z"}})])]),_v(" button, followed by the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Confirm merge")]),_v(" button. You should see a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Pull request successfully merged and closed")]),_v(" message after the PR is merged."),_c('br')]),_v(" "),_c('ul',[_c('li',[_v("You can choose between three merging options by clicking on the down-arrow in the "),_c('span',{staticClass:"btn btn-success pl-1 pr-1 pb-0 pt-0"},[_v("Merge pull request "),_c('svg',{staticClass:"octicon octicon-triangle-down",attrs:{"version":"1.1","width":"16","height":"16","viewBox":"0 0 16 16","aria-hidden":"true"}},[_c('path',{attrs:{"d":"M4.427 7.427l3.396 3.396a.25.25 0 00.354 0l3.396-3.396A.25.25 0 0011.396 7H4.604a.25.25 0 00-.177.427z"}})])]),_v(" button. If you are new to Git and GitHub, the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Create merge commit")]),_v(" options are recommended.")])]),_v(" "),_m(103)],1)]),_v(" "),_m(104)])]),_v(" "),_c('i',{staticClass:"fa fa-arrow-circle-up fa-lg d-print-none",attrs:{"id":"scroll-top-button","onclick":"handleScrollTop()","aria-hidden":"true"}}),_c('p')]),_v(" "),_c('overlay-source',{staticClass:"fixed-header-padding",attrs:{"id":"page-nav","tag-name":"nav","to":"page-nav"}},[_c('div',{staticClass:"nav-component slim-scroll"})])],1),_v(" "),_m(105)])}
};
    var pageVueStaticRenderFns = [function anonymous(
) {
with(this){return _c('h1',{attrs:{"id":"software-engineering-for-self-directed-learners"}},[_c('span',{staticClass:"anchor",attrs:{"id":"software-engineering-for-self-directed-learners"}}),_c('span',{staticClass:"text-dark"},[_c('small',[_c('strong',[_c('strong',[_v("Software Engineering for Self-Directed Learners »")])])])]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#software-engineering-for-self-directed-learners","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_c('link',{attrs:{"rel":"stylesheet","href":"/se-book/css/textbook.css"}}),_v(" "),_c('link',{attrs:{"rel":"stylesheet","href":"/se-book/css/print.css"}})])}
},function anonymous(
) {
with(this){return _c('h1',{attrs:{"id":"git-and-github"}},[_c('span',{staticClass:"anchor",attrs:{"id":"git-and-github"}}),_v("Git and GitHub"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#git-and-github","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('div',[_c('h4',{attrs:{"id":"init-getting-started"}},[_c('span',{staticClass:"anchor",attrs:{"id":"init-getting-started"}}),_c('span',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("init")]),_v(": Getting started")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#init-getting-started","onclick":"event.stopPropagation()"}})])])}
},function anonymous(
) {
with(this){return _c('span',{staticClass:"non-printable"},[_c('p',[_c('strong',[_v("0. Take a peek at the full picture(?)")]),_v(". Optionally, if you are the sort who prefers to have some sense of the full picture before you get into the nitty-gritty details, watch the video in the panel below:\n")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("1. The first step is to install")]),_v(" "),_c('a',{attrs:{"href":"https://www.sourcetreeapp.com/"}},[_v("SourceTree")]),_v(", which is Git + a GUI for Git. If you prefer to use Git via the command line (i.e., without a GUI), you can "),_c('a',{attrs:{"href":"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"}},[_v("install Git")]),_v(" instead.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("2. Next, initialize a repository.")]),_v(" Let us assume you want to version control content in a specific directory. In that case, you need to initialize a Git repository in that directory. Here are the steps:")])}
},function anonymous(
) {
with(this){return _c('p',[_v("Create a directory for the repo (e.g., a directory named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("things")]),_v(").")])}
},function anonymous(
) {
with(this){return _c('div',[_c('h4',{attrs:{"id":"commit-saving-changes-to-history"}},[_c('span',{staticClass:"anchor",attrs:{"id":"commit-saving-changes-to-history"}}),_c('span',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("commit")]),_v(": Saving changes to history")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#commit-saving-changes-to-history","onclick":"event.stopPropagation()"}})])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("After initializing a repository, Git can help you with revision controlling files inside the "),_c('em',[_v("working directory")]),_v(". However, it is not automatic.")]),_v(" It is up to you to tell Git which of your changes (aka "),_c('em',[_v("revisions")]),_v(") should be "),_c('em',[_v("committed")]),_v(" to its memory for later use. Saving changes into Git's memory in that way is often called "),_c('em',[_v("committing")]),_v(" and a change saved to the revision history is called a "),_c('em',[_v("commit")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("1. Do some changes to the content inside the "),_c('em',[_v("working directory")])]),_v(" e.g., create a file named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fruits.txt")]),_v(" in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("things")]),_v(" directory and add some dummy text to it.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("2. Observe how the file is detected by Git.")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("3. Stage the changes to commit")]),_v(": Although Git has detected the file in the working directory, it will not do anything with the file unless you tell it to. Suppose you want to commit the current changes to the file. First, you should "),_c('em',[_v("stage")]),_v(" the file.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("4. Commit")]),_v(" the staged version of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fruits.txt")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("Note the existence of something called the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch.")]),_v(" Git allows you to have multiple branches (i.e. it is a way to evolve the content in parallel) and Git auto-creates a branch named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" on which the commits go on by default.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("5. Do a few more commits")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('ol',[_c('li',[_c('p',[_v("Make some changes to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fruits.txt")]),_v(" (e.g. add some text and delete some text). Stage the changes, and commit the changes using the same steps you followed before. You should end up with something like this.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/commit/images/sourcetree_6.png","height":"180"}}),_v(" "),_c('p')]),_v(" "),_c('li',[_c('p',[_v("Next, add two more files "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("colors.txt")]),_v(" and "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("shapes.txt")]),_v(" to the same working directory. Add a third commit to record the current state of the working directory.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/commit/images/sourcetree_7.png","height":"150"}}),_v(" "),_c('p')])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("6. See the revision graph:")]),_v("  Note how commits form a path-like structure aka the "),_c('em',[_v("revision tree/graph")]),_v(". In the revision graph, each commit is shown as linked to its 'parent' commit (i.e., the commit before it).")])}
},function anonymous(
) {
with(this){return _c('div',[_c('h4',{attrs:{"id":"omitting-files-from-revision-control"}},[_c('span',{staticClass:"anchor",attrs:{"id":"omitting-files-from-revision-control"}}),_c('span',[_v("Omitting files from revision control")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#omitting-files-from-revision-control","onclick":"event.stopPropagation()"}})])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("1. Add a file into your repo's working folder that you supposedly don't want to revision-control")]),_v(" e.g., a file named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("temp.txt")]),_v(". Observe how Git has detected the new file.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("2. Tell Git to ignore that file:")])])}
},function anonymous(
) {
with(this){return _c('div',[_c('h4',{attrs:{"id":"tag-naming-commits"}},[_c('span',{staticClass:"anchor",attrs:{"id":"tag-naming-commits"}}),_c('span',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("tag")]),_v(": Naming commits")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#tag-naming-commits","onclick":"event.stopPropagation()"}})])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("Each Git commit is uniquely identified by a hash")]),_v(" e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("d670460b4b4aece5915caf5c68d12f560a9fe3e4")]),_v(". As you can imagine, using such an identifier is not very convenient for our day-to-day use. As a solution, Git allows adding a more human-readable "),_c('em',[_v("tag")]),_v(" to a commit e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("v1.0-beta")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('p',[_v("Here's how you can tag a commit in a local repo (e.g. in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("samplerepo-things")]),_v(" repo):")])}
},function anonymous(
) {
with(this){return _c('div',[_c('h4',{attrs:{"id":"diff-comparing-revisions"}},[_c('span',{staticClass:"anchor",attrs:{"id":"diff-comparing-revisions"}}),_c('span',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("diff")]),_v(": Comparing revisions")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#diff-comparing-revisions","onclick":"event.stopPropagation()"}})])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("Git can show you what changed in each commit.")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("Git can also show you the difference between two points in the history")]),_v(" of the repo.")])}
},function anonymous(
) {
with(this){return _c('div',[_c('h4',{attrs:{"id":"checkout-retrieving-a-specific-revision"}},[_c('span',{staticClass:"anchor",attrs:{"id":"checkout-retrieving-a-specific-revision"}}),_c('span',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("checkout")]),_v(": Retrieving a specific revision")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#checkout-retrieving-a-specific-revision","onclick":"event.stopPropagation()"}})])])}
},function anonymous(
) {
with(this){return _c('div',[_c('h4',{attrs:{"id":"stash-shelving-changes-temporarily"}},[_c('span',{staticClass:"anchor",attrs:{"id":"stash-shelving-changes-temporarily"}}),_c('span',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("stash")]),_v(": Shelving changes temporarily")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#stash-shelving-changes-temporarily","onclick":"event.stopPropagation()"}})])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("You can use Git's "),_c('mark',[_c('em',[_v("stash")])]),_v(" feature to temporarily shelve (or stash) changes you've made to your working copy")]),_v(" so that you can work on something else, and then come back and re-apply the stashed changes later on. "),_c('sub',[_v("-- adapted from "),_c('a',{attrs:{"href":"https://www.atlassian.com/git/tutorials/git-stash"}},[_v("Atlassian")])])])}
},function anonymous(
) {
with(this){return _c('div',[_c('h4',{attrs:{"id":"clone-copying-a-repo"}},[_c('span',{staticClass:"anchor",attrs:{"id":"clone-copying-a-repo"}}),_c('span',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("clone")]),_v(": Copying a repo")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#clone-copying-a-repo","onclick":"event.stopPropagation()"}})])])}
},function anonymous(
) {
with(this){return _c('p',[_v("Suppose you want to clone the sample repo "),_c('a',{attrs:{"href":"https://github.com/se-edu/samplerepo-things"}},[_v("samplerepo-things")]),_v(" to your computer.")])}
},function anonymous(
) {
with(this){return _c('div',[_c('h4',{attrs:{"id":"pull-fetch-downloading-data-from-other-repos"}},[_c('span',{staticClass:"anchor",attrs:{"id":"pull-fetch-downloading-data-from-other-repos"}}),_c('span',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("pull")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fetch")]),_v(": Downloading data from other repos")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#pull-fetch-downloading-data-from-other-repos","onclick":"event.stopPropagation()"}})])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("2. Delete the last few commits to simulate cloning the repo a few commits ago.")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("3. Pull")]),_v(" from the other repo: To get those missing commits to your local repo (i.e. to sync your local repo with upstream repo) you can do a pull.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('span',[_c('span',{staticClass:"fas fa-info-circle",attrs:{"aria-hidden":"true"}})]),_v(" "),_c('strong',[_v("You can also do a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fetch")]),_v(" instead of a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("pull")])]),_v(" in which case the new commits will be downloaded to your repo but the working directory will remain at the current commit. To move the current state to the latest commit that was downloaded, you need to do a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("merge")]),_v(". A "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("pull")]),_v(" is a shortcut that does both those steps in one go.")])}
},function anonymous(
) {
with(this){return _c('div',[_c('h4',{attrs:{"id":"push-uploading-data-to-other-repos"}},[_c('span',{staticClass:"anchor",attrs:{"id":"push-uploading-data-to-other-repos"}}),_c('span',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("push")]),_v(": Uploading data to other repos")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#push-uploading-data-to-other-repos","onclick":"event.stopPropagation()"}})])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("1. Fork")]),_v(" an existing GitHub repo (e.g., "),_c('a',{attrs:{"href":"https://github.com/se-edu/samplerepo-things"}},[_v("samplerepo-things")]),_v(") to your GitHub account.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("2. Clone the fork")]),_v(" (not the original) to your computer.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("3. Commit")]),_v(" some changes in your local repo.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("4. Push")]),_v(" the new commits to your fork on GitHub")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("You can push to repos other than the one you cloned from")]),_v(", as long as the target repo and your repo have a shared history.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("You can even push an entire local repository")]),_v(" to GitHub, to form an entirely new remote repository. For example, you created a local repo and worked with it for a while but now you want to upload it onto GitHub (as a backup or to share it with others). The steps are given below.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("1. Create an "),_c('mark',[_v("empty")]),_v(" remote repo on GitHub.")])])}
},function anonymous(
) {
with(this){return _c('ol',[_c('li',[_c('p',[_v("Login to your GitHub account and choose to create a new Repo. "),_c('br'),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/push/images/createNewRemoteRepo.png","width":"150"}})])]),_v(" "),_c('li',[_c('p',[_v("In the next screen, provide a name for your repo but keep the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Initialize this repo ...")]),_v(" tick box unchecked."),_c('br'),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/push/images/fillNewRepoInfo.png","width":"600"}})])]),_v(" "),_c('li',[_c('p',[_v("Note the URL of the repo. It will be of the form "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("https://github.com/{your_user_name}/{repo_name}.git")]),_v("."),_c('br'),_v("\ne.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("https://github.com/johndoe/foobar.git")]),_v(" (note the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(".git")]),_v(" at the end)"),_c('br'),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/push/images/newRepoUrl.png","width":"450"}})])])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("3. Push the repo")]),_v(" to the remote.")])}
},function anonymous(
) {
with(this){return _c('div',[_c('h4',{attrs:{"id":"branch-doing-multiple-parallel-changes"}},[_c('span',{staticClass:"anchor",attrs:{"id":"branch-doing-multiple-parallel-changes"}}),_c('span',[_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("branch")]),_v(": Doing multiple parallel changes")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#branch-doing-multiple-parallel-changes","onclick":"event.stopPropagation()"}})])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("Git supports branching")]),_v(", which allows you to do multiple parallel changes to the content of a repository.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("A Git branch is simply a "),_c('em',[_v("named label")]),_v(" pointing to a commit. The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("HEAD")]),_v(" label indicates which branch you are on.")]),_v(" Git creates a branch named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" by default. When you add a commit, it goes into the branch you are currently on, and the branch label (together with the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("HEAD")]),_v(" label) moves to the new commit.")])}
},function anonymous(
) {
with(this){return _c('ol',[_c('li',[_v("There is only one branch (i.e., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(") and there is only one commit on it.")]),_v(" "),_c('li',[_v("A new commit has been added. The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" and the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("HEAD")]),_v(" labels have moved to the new commit.")]),_v(" "),_c('li',[_v("A new branch "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fix1")]),_v(" has been added. The repo has switched to the new branch too (hence, the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("HEAD")]),_v(" label is attached to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fix1")]),_v(" branch).")]),_v(" "),_c('li',[_v("A new commit ("),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("c")]),_v(") has been added. The current branch label "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fix1")]),_v(" moves to the new commit, together with the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("HEAD")]),_v(" label.")]),_v(" "),_c('li',[_v("The repo has switched back to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch.")])])}
},function anonymous(
) {
with(this){return _c('ol',{attrs:{"start":"6"}},[_c('li',[_v("A new commit ("),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("d")]),_v(") has been added. The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" label has moved to that commit.")]),_v(" "),_c('li',[_v("The repo has switched back to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fix1")]),_v(" branch and added a new commit ("),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("e")]),_v(") to it.")]),_v(" "),_c('li',[_v("The repo has switched to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch and the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fix1")]),_v(" branch has been merged into the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch, creating a "),_c('em',[_v("merge commit")]),_v(" "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("f")]),_v(". The repo is currently on the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch.")])])}
},function anonymous(
) {
with(this){return _c('p',[_v("Follow the steps below to learn how to work with branches. You can use any repo you have on your computer (e.g. a clone of the "),_c('a',{attrs:{"href":"https://github.com/se-edu/samplerepo-things"}},[_v("samplerepo-things")]),_v(") for this.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("0. Observe that you are normally in the branch called "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(".")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("1. Start a branch named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("feature1")]),_v(" and switch to the new branch.")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("2. Create some commits in the new branch.")]),_v(" "),_c('span',{staticClass:"dimmed"},[_v("Just commit as per normal. Commits you add while on a certain branch will become part of that branch.")]),_c('br'),_v("\nNote how the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" label and the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("HEAD")]),_v(" label moves to the new commit (The "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("HEAD")]),_v(" label of the local repo is represented as "),_c('span',{staticClass:"fas fa-dot-circle",attrs:{"aria-hidden":"true"}}),_v(" in SourceTree).")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("3. Switch to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch.")]),_v(" Note how the changes you did in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("feature1")]),_v(" branch are no longer in the working directory.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("4. Add a commit to the master branch.")]),_v(" Let’s imagine it’s a bug fix."),_c('br'),_v("\nTo keep things simple for the time being, this commit should "),_c('mark',[_v("not involve the same content that you changed in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("feature1")]),_v(" branch")]),_v(". To be on the safe side, this commit can change an entirely different file.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("5. Switch back to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("feature1")]),_v(" branch")]),_v(" "),_c('span',{staticClass:"dimmed"},[_v("(similar to step 3)")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("6. Merge the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("feature1")]),_v(" branch")]),_v(", giving an end-result like the following. Also note how Git has created a "),_c('em',[_v("merge commit")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('p',[_v("The objective of that merge was to "),_c('em',[_v("sync")]),_v(" the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("feature1")]),_v(" branch with the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch. Observe how the changes you did in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch (i.e. the imaginary bug fix) is now available even when you are in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("feature1")]),_v(" branch.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("7. Add another commit to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("feature1")]),_v(" branch.")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("8. Switch to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch and add one more commit.")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("9. Merge "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("feature1")]),_v(" to the master branch")]),_v(", giving and end-result like this:")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("10. Create a new branch called "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("add-countries")]),_v(", switch to it, and add some commits to it")]),_v(" "),_c('span',{staticClass:"dimmed"},[_v("(similar to steps 1-2 above)")]),_v(". You should have something like this now:")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("11. Go back to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch and merge the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("add-countries")]),_v(" branch onto the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch")]),_v(" "),_c('span',{staticClass:"dimmed"},[_v("(similar to steps 8-9 above)")]),_v(". While you might expect to see something like the following,")])}
},function anonymous(
) {
with(this){return _c('p',[_v("That is because "),_c('strong',[_v("Git does a "),_c('mark',[_c('em',[_v("fast forward")]),_v(" merge")]),_v(" if possible")]),_v(". Seeing that the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch has not changed since you started the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("add-countries")]),_v(" branch, Git has decided it is simpler to just put the commits of the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("add-countries")]),_v(" branch in front of the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch, without going into the trouble of creating an extra merge commit.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("It is possible to force Git to create a merge commit even if fast forwarding is possible.")])])}
},function anonymous(
) {
with(this){return _c('div',[_c('div',[_c('h4',{attrs:{"id":"dealing-with-merge-conflicts"}},[_c('span',{staticClass:"anchor",attrs:{"id":"dealing-with-merge-conflicts"}}),_c('span',[_v("Dealing with merge conflicts")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#dealing-with-merge-conflicts","onclick":"event.stopPropagation()"}})])]),_v(" "),_c('div',[_c('p',[_c('strong',[_v("Merge conflicts happen when you try to combine two incompatible versions")]),_v(" (e.g., merging a branch to another but each branch changed the same part of the code in a different way).")]),_v(" "),_c('p',[_v("Here are the steps to simulate a merge conflict and use it to learn how to resolve merge conflicts.")]),_v(" "),_c('p',[_c('strong',[_v("0. Create an empty repo or clone an existing repo")]),_v(", to be used for this activity.")]),_v(" "),_c('p',[_c('strong',[_v("1. Start a branch named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fix1")]),_v(" in the repo. Create a commit")]),_v(" that adds a line with some text to one of the files.")]),_v(" "),_c('p',[_c('strong',[_v("2. Switch back to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch. Create a commit with a conflicting change")]),_v(" i.e. it adds a line with some different text in the exact location the previous line was added.")]),_v(" "),_c('img',{attrs:{"src":"/se-book/gitAndGithub/mergeConflicts/images/sourcetree_1.png","height":"350"}}),_v(" "),_c('p'),_v(" "),_c('p',[_c('strong',[_v("3. Try to merge the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fix1")]),_v(" branch onto the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch.")]),_v(" Git will pause mid-way during the merge and report a merge conflict. If you open the conflicted file, you will see something like this:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs txt"}},[_c('span',[_v("COLORS\n")]),_c('span',[_v("------\n")]),_c('span',[_v("blue\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"highlighted"}},[_v("<<<<<< HEAD")]),_v("\n")]),_c('span',[_v("black\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"highlighted"}},[_v("=======")]),_v("\n")]),_c('span',[_v("green\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"highlighted"}},[_v(">>>>>> fix1")]),_v("\n")]),_c('span',[_v("red\n")]),_c('span',[_v("white\n")])])]),_c('p',[_c('strong',[_v("4. Observe how the conflicted part is marked")]),_v(" between a line starting with "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("<<<<<< ")]),_v(" and a line starting with "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v(">>>>>>")]),_v(", separated by another line starting with "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("=======")]),_v(".")]),_v(" "),_c('p',[_v("Highlighted below is the conflicting part that is coming from the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"style":"counter-reset: line 2;","class":"line-numbers hljs txt"}},[_c('span',[_v("blue\n")]),_c('span',[_v("<<<<<< HEAD\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"highlighted"}},[_v("black")]),_v("\n")]),_c('span',[_v("=======\n")]),_c('span',[_v("green\n")]),_c('span',[_v(">>>>>> fix1\n")]),_c('span',[_v("red\n")])])]),_c('p',[_v("This is the conflicting part that is coming from the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("fix1")]),_v(" branch:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"style":"counter-reset: line 2;","class":"line-numbers hljs txt"}},[_c('span',[_v("blue\n")]),_c('span',[_v("<<<<<< HEAD\n")]),_c('span',[_v("black\n")]),_c('span',[_v("=======\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"highlighted"}},[_v("green")]),_v("\n")]),_c('span',[_v(">>>>>> fix1\n")]),_c('span',[_v("red\n")])])]),_c('p',[_c('strong',[_v("5. Resolve the conflict by editing the file")]),_v(". Let us assume you want to keep both lines in the merged version. You can modify the file to be like this:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs txt"}},[_c('span',[_v("COLORS\n")]),_c('span',[_v("------\n")]),_c('span',[_v("blue\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"highlighted"}},[_v("black")]),_v("\n")]),_c('span',[_c('span',{pre:true,attrs:{"class":"highlighted"}},[_v("green")]),_v("\n")]),_c('span',[_v("red\n")]),_c('span',[_v("white\n")])])]),_c('p',[_c('strong',[_v("6. Stage the changes, and commit.")])])])])}
},function anonymous(
) {
with(this){return _c('div',[_c('h4',{attrs:{"id":"creating-prs"}},[_c('span',{staticClass:"anchor",attrs:{"id":"creating-prs"}}),_c('span',[_v("Creating PRs")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#creating-prs","onclick":"event.stopPropagation()"}})])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("1. Fork")]),_v(" the repo onto your GitHub account.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("2. Clone")]),_v(" it onto your computer.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("3. Commit")]),_v(" your changes e.g., add a new file with some contents and commit it.")])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_c('strong',[_v("Option A - Commit changes to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch")])]),_v(" "),_c('li',[_c('strong',[_v("Option B - Commit to a new branch")]),_v(" e.g., create a branch named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("add-intro")]),_v(" (remember to switch to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch before creating a new branch) and add your commit to it.")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("5. Initiate the PR creation:")])])}
},function anonymous(
) {
with(this){return _c('li',[_c('p',[_v("Go to your fork.")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("7. Submit the PR:")])])}
},function anonymous(
) {
with(this){return _c('li',[_c('p',[_v("Fill in the PR name and description e.g.,"),_c('br'),_v("\nName: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Add an introduction to the README.md")]),_c('br'),_v("\nDescription:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"no-line-numbers hljs"}},[_c('span',[_v("Add some paragraph to the README.md to explain ...\n")]),_c('span',[_v("Also add a heading ...\n")])])])])}
},function anonymous(
) {
with(this){return _c('li',[_c('p',[_v("Go to the receiving repo to verify that your PR appears there in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Pull requests")]),_v(" tab.\n")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("The next step of the PR life cycle is the PR "),_c('em',[_v("review")]),_v(".")]),_v(" The members of the repo that received your PR can now review your proposed changes.")])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_v("If they like the changes, they can "),_c('em',[_v("merge")]),_v(" the changes to their repo, which also closes the PR automatically.")]),_v(" "),_c('li',[_v("If they don't like it at all, they can simply close the PR too i.e., they reject your proposed change.")]),_v(" "),_c('li',[_v("In most cases, they will add comments to the PR to suggest further changes. When that happens, GitHub will notify you.")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("You can update the PR along the way too.")]),_v(" Suppose PR reviewers suggested a certain improvement to your proposed code. To update your PR as per the suggestion, you can simply modify the code in your local repo, commit the updated code to the same "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch, and push to your fork as you did earlier. The PR will auto-update accordingly.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("Sending PRs using the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch is less common")]),_v(" than sending PRs using separate branches. For example, suppose you wanted to propose two bug fixes that are not related to each other. In that case, it is more appropriate to send two separate PRs so that each fix can be reviewed, refined, and merged independently. But if you send PRs using the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch only, both fixes (and any other change you do in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch) will appear in the PRs you create from it.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("To create another PR")]),_v(" while the current PR is still under review, create a new branch (remember to "),_c('mark',[_v("switch back to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch first")]),_v("), add your new proposed change in that branch, and create a new PR following the steps given above.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("It is possible to create PRs within the same repo")]),_v(" e.g., you can create a PR from branch "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("feature-x")]),_v(" to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch, within the same repo. Doing so will allow the code to be reviewed by other developers (using PR review mechanism) before it is merged.")])}
},function anonymous(
) {
with(this){return _c('div',[_c('h4',{attrs:{"id":"reviewing-prs"}},[_c('span',{staticClass:"anchor",attrs:{"id":"reviewing-prs"}}),_c('span',[_v("Reviewing PRs")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#reviewing-prs","onclick":"event.stopPropagation()"}})])])}
},function anonymous(
) {
with(this){return _c('p',[_v("The "),_c('em',[_v("PR review")]),_v(" stage is a dialog between the PR author and members of the repo that received the PR, in order to refine and eventually merge the PR.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("1. Locate the PR:")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("2. Read the PR description.")]),_v(" It might contain information relevant to reviewing the PR.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("4. Add review comments:")])])}
},function anonymous(
) {
with(this){return _c('span',{staticStyle:{"color":"#0066ff"}},[_c('span',{staticClass:"fas fa-plus-square",attrs:{"aria-hidden":"true"}})])}
},function anonymous(
) {
with(this){return _c('span',{staticClass:"badge rounded-pill bg-warning text-dark"},[_c('span',{staticClass:"fas fa-lightbulb",attrs:{"aria-hidden":"true"}})])}
},function anonymous(
) {
with(this){return _c('span',{staticStyle:{"color":"#0066ff"}},[_c('span',{staticClass:"fas fa-plus-square",attrs:{"aria-hidden":"true"}})])}
},function anonymous(
) {
with(this){return _c('li',[_c('span',[_c('span',{staticClass:"fas fa-paperclip",attrs:{"aria-hidden":"true"}})]),_v(" "),_c('a',{attrs:{"href":"https://se-education.org/guides/guidelines/PRs-reviewing.html"}},[_v("This page @SE-EDU/guides")]),_v(" has some best practices PR reviewers can follow.")])}
},function anonymous(
) {
with(this){return _c('span',{staticClass:"badge rounded-pill bg-warning text-dark"},[_c('span',{staticClass:"fas fa-lightbulb",attrs:{"aria-hidden":"true"}})])}
},function anonymous(
) {
with(this){return _c('li',[_v("Type in an overall comment about the PR, if any. e.g.,"),_c('pre',[_c('code',{pre:true,attrs:{"class":"no-line-numbers hljs"}},[_c('span',[_v("Overall, I found your code easy to read for the most part except a few places\n")]),_c('span',[_v("where the nesting was too deep. I noted a few minor coding standard violations\n")]),_c('span',[_v("too. Some of the classes are getting quite long. Consider splitting into\n")]),_c('span',[_v("smaller classes if that makes sense.\n")])])]),_c('span',{staticClass:"badge rounded-pill bg-warning text-dark"},[_c('span',{staticClass:"fas fa-lightbulb",attrs:{"aria-hidden":"true"}})]),_v(" "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("LGTM")]),_v(" is often used in such overall comments, to indicate "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Looks good to merge")]),_v("."),_c('br'),_v(" "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("nit")]),_v(" is another such term, used to indicate minor flaws e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("LGTM, almost. Just a few nits to fix.")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('li',[_v("Choose "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Approve")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Comment")]),_v(", or "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Request changes")]),_v(" option as appropriate and click on the "),_c('span',{staticClass:"btn btn-success pl-1 pr-1 pb-0 pt-0"},[_v("Submit review")]),_v(" button.")])}
},function anonymous(
) {
with(this){return _c('div',[_c('h4',{attrs:{"id":"merging-prs"}},[_c('span',{staticClass:"anchor",attrs:{"id":"merging-prs"}}),_c('span',[_v("Merging PRs")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#merging-prs","onclick":"event.stopPropagation()"}})])])}
},function anonymous(
) {
with(this){return _c('ol',[_c('li',[_v("Fork any repo (e.g., "),_c('a',{attrs:{"href":"https://github.com/se-edu/samplerepo-pr-practice"}},[_v("samplerepo-pr-practice")]),_v(").")]),_v(" "),_c('li',[_v("Clone in to your computer.")]),_v(" "),_c('li',[_v("Create a new branch e.g., ("),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("feature1")]),_v(") and add some commits to it.")]),_v(" "),_c('li',[_v("Push the new branch to the fork.")]),_v(" "),_c('li',[_v("Create a PR from that branch to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch in your fork. Yes, it is possible to create a PR within the same repo.")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("1. Locate the PR")]),_v(" to be merged in your repo's GitHub page.")])}
},function anonymous(
) {
with(this){return _c('strong',[_v("2. Click on the "),_c('span',{staticClass:"tab"},[_c('span',{staticClass:"far fa-comments",attrs:{"aria-hidden":"true"}}),_v(" Conversation")]),_v(" tab")])}
},function anonymous(
) {
with(this){return _c('li',[_c('strong',[_v("Problem: The PR code is out-of-date")]),_v(", indicated by the message "),_c('strong',[_c('span',{staticClass:"dimmed"},[_v("This branch is out-of-date with the base branch")])]),_v(". That means the repo's "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch has been updated since the PR code was last updated.\n"),_c('ul',[_c('li',[_v("If the PR author has allowed you to update the PR and you have sufficient permissions, GitHub will allow you to update the PR simply by clicking the "),_c('span',{staticClass:"btn btn-light pl-1 pr-1 pb-0 pt-0 border"},[_v("Update branch")]),_v(" on the right side of the 'out-of-date' error message.\nIf that option is not available, post a message in the PR requesting the PR author to update the PR.")])])])}
},function anonymous(
) {
with(this){return _c('strong',[_c('span',{staticClass:"dimmed"},[_v("This branch has conflicts that must be resolved")])])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_v("If the conflicts are simple, GitHub might allow you to resolve them using the Web interface.")]),_v(" "),_c('li',[_v("If that option is not available, post a message in the PR requesting the PR author to update the PR.")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("Next, sync your local repos (and forks).")]),_v(" Merging a PR simply merges the code in the upstream remote repository in which it was merged. The PR author (and other members of the repo) needs to pull the merged code from the upstream repo to their local repos and push the new code to their respective forks to sync the fork with the upstream repo.")])}
},function anonymous(
) {
with(this){return _c('div',[_c('div',[_c('h4',{attrs:{"id":"forking-workflow"}},[_c('span',{staticClass:"anchor",attrs:{"id":"forking-workflow"}}),_c('span',[_v("Forking workflow")]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#forking-workflow","onclick":"event.stopPropagation()"}})])]),_v(" "),_c('div',[_c('p',[_v("You can follow the steps in the simulation of a forking workflow given below to learn how to follow such a workflow.")]),_v(" "),_c('p',[_c('span',[_c('span',{staticClass:"fas fa-info-circle",attrs:{"aria-hidden":"true"}})]),_v(" This activity is best done as a team.")]),_v(" "),_c('p',[_c('strong',[_v("Step 1. One member: set up the team org and the team repo.")])]),_v(" "),_c('ol',[_c('li',[_c('p',[_c('a',{attrs:{"href":"https://help.github.com/articles/creating-a-new-organization-from-scratch/"}},[_c('strong',[_v("Create a GitHub organization")])]),_v(" for your team.  The org name is up to you. We'll refer to this organization as "),_c('em',[_v("team org")]),_v(" from now on.")])]),_v(" "),_c('li',[_c('p',[_c('a',{attrs:{"href":"https://help.github.com/enterprise/2.10/admin/guides/user-management/creating-teams/"}},[_c('strong',[_v("Add a team")])]),_v(" called "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("developers")]),_v(" to your team org.")])]),_v(" "),_c('li',[_c('p',[_c('a',{attrs:{"href":"https://help.github.com/enterprise/2.0/admin/guides/user-management/adding-or-inviting-people-to-teams/"}},[_c('strong',[_v("Add team members")])]),_v(" to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("developers")]),_v(" team.")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("Fork")]),_v(" "),_c('a',{attrs:{"href":"https://github.com/se-edu/samplerepo-workflow-practice"}},[_v("se-edu/samplerepo-workflow-practice")]),_v(" to your team org. We'll refer to this as the "),_c('em',[_v("team repo")]),_v(".")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_c('a',{attrs:{"href":"https://help.github.com/articles/managing-team-access-to-an-organization-repository/"}},[_v("Add the forked repo")]),_v(" to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("developers")]),_v(" team.")]),_v(" Give write access.")])])]),_v(" "),_c('p',[_c('strong',[_v("Step 2. Each team member: create PRs via own fork.")])]),_v(" "),_c('ol',[_c('li',[_c('p',[_c('strong',[_v("Fork that repo")]),_v(" from your team org to your own GitHub account.")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("Create a branch")]),_v(" named "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("add-{your name}-info")]),_v(" (e.g. "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("add-johnTan-info")]),_v(") in the local repo.")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("Add a file")]),_v(" "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("yourName.md")]),_v(" into the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("members")]),_v(" directory (e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("members/jonhTan.md")]),_v(") containing some info about you into that branch.")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("Push that branch to your fork")]),_v(".")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("Create a PR")]),_v(" from that branch to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch of the team repo.")])])]),_v(" "),_c('p',[_c('strong',[_v("Step 3. For each PR: review, update, and merge.")])]),_v(" "),_c('ol',[_c('li',[_c('p',[_c('strong',[_v("[A team member (not the PR author)] Review the PR")]),_v(" by adding comments (can be just dummy comments).")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("[PR author] Update the PR")]),_v(" by pushing more commits to it, to simulate updating the PR based on review comments.")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("[Another team member] Approve and merge")]),_v(" the PR using the GitHub interface.")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("[All members]")]),_v(" "),_c('a',{attrs:{"href":"https://help.github.com/articles/syncing-a-fork/"}},[_c('strong',[_v("Sync your local repo (and your fork)")]),_v(" with upstream repo")]),_v(". In this case, your "),_c('em',[_v("upstream repo")]),_v(" is the repo in your team org.")])])]),_v(" "),_c('p',[_c('strong',[_v("Step 4. Create conflicting PRs.")])]),_v(" "),_c('ol',[_c('li',[_c('p',[_c('strong',[_v("[One member]: Update README:")]),_v(" In the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch, remove John Doe and Jane Doe from the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("README.md")]),_v(", commit, and push to the main repo.")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("[Each team member] Create a PR")]),_v(" to add yourself under the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Team Members")]),_v(" section in the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("README.md")]),_v(". Use a new branch for the PR e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("add-johnTan-name")]),_v(".")])])]),_v(" "),_c('p',[_c('strong',[_v("Step 5. Merge conflicting PRs")]),_v(" one at a time. Before merging a PR, you’ll have to resolve conflicts.")]),_v(" "),_c('ol',[_c('li',[_c('p',[_v("[Optional] A member can inform the PR author (by posting a comment) that there is a conflict in the PR.")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("[PR author] Resolve the conflict locally")]),_v(":")]),_v(" "),_c('ol',[_c('li',[_v("Pull the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch from the repo in your team org.")]),_v(" "),_c('li',[_v("Merge the pulled "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch to your PR branch.")]),_v(" "),_c('li',[_v("Resolve the merge conflict that crops up during the merge.")]),_v(" "),_c('li',[_v("Push the updated PR branch to your fork.")])])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("[Another member or the PR author]: Merge the de-conflicted PR")]),_v(": When GitHub does not indicate a conflict anymore, you can go ahead and merge the PR.")])])])])])}
},function anonymous(
) {
with(this){return _c('footer',[_c('div',{staticClass:"text-center"},[_c('small',[_v("["),_c('span',[_c('strong',[_v("Powered by")])]),_v(" "),_c('img',{attrs:{"src":"https://markbind.org/favicon.ico","width":"30"}}),_v(" "),_c('a',{attrs:{"href":"https://markbind.org/"}},[_v("MarkBind 4.0.0")]),_v(", generated on Sun, 17 Jul 2022, 1:27:57 GMT+8]")])])])}
}];
  